{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst spawnSync = require('child_process').spawnSync;\n\nconst semverCoerce = require('semver/functions/coerce');\n\nconst semverGreaterThanOrEqualTo = require('semver/functions/gte');\n\nconst platform = require('./platform');\n\nconst env = process.env;\n\nconst minimumLibvipsVersionLabelled = env.npm_package_config_libvips ||\n/* istanbul ignore next */\nrequire('../package.json').config.libvips;\n\nconst minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath, {\n      recursive: true\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n};\n\nconst cachePath = function () {\n  const npmCachePath = env.npm_config_cache || (\n  /* istanbul ignore next */\n  env.APPDATA ? path.join(env.APPDATA, 'npm-cache') : path.join(os.homedir(), '.npm'));\n  mkdirSync(npmCachePath);\n  const libvipsCachePath = path.join(npmCachePath, '_libvips');\n  mkdirSync(libvipsCachePath);\n  return libvipsCachePath;\n};\n\nconst log = function (item) {\n  if (item instanceof Error) {\n    console.error(`sharp: Installation error: ${item.message}`);\n  } else {\n    console.log(`sharp: ${item}`);\n  }\n};\n\nconst isRosetta = function () {\n  /* istanbul ignore next */\n  if (process.platform === 'darwin' && process.arch === 'x64') {\n    const translated = spawnSync('sysctl sysctl.proc_translated', spawnSyncOptions).stdout;\n    return (translated || '').trim() === 'sysctl.proc_translated: 1';\n  }\n\n  return false;\n};\n\nconst globalLibvipsVersion = function () {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync(`PKG_CONFIG_PATH=\"${pkgConfigPath()}\" pkg-config --modversion vips-cpp`, spawnSyncOptions).stdout;\n    /* istanbul ignore next */\n\n    return (globalLibvipsVersion || '').trim();\n  } else {\n    return '';\n  }\n};\n\nconst hasVendoredLibvips = function () {\n  const vendorPath = path.join(__dirname, '..', 'vendor', minimumLibvipsVersion, platform());\n  return fs.existsSync(vendorPath);\n};\n\nconst pkgConfigPath = function () {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync('which brew >/dev/null 2>&1 && eval $(brew --env) && echo $PKG_CONFIG_LIBDIR', spawnSyncOptions).stdout || '';\n    return [brewPkgConfigPath.trim(), env.PKG_CONFIG_PATH, '/usr/local/lib/pkgconfig', '/usr/lib/pkgconfig'].filter(function (p) {\n      return !!p;\n    }).join(':');\n  } else {\n    return '';\n  }\n};\n\nconst useGlobalLibvips = function () {\n  if (Boolean(env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return false;\n  }\n  /* istanbul ignore next */\n\n\n  if (isRosetta()) {\n    return false;\n  }\n\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion &&\n  /* istanbul ignore next */\n  semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion,\n  minimumLibvipsVersionLabelled,\n  cachePath,\n  log,\n  globalLibvipsVersion,\n  hasVendoredLibvips,\n  pkgConfigPath,\n  useGlobalLibvips,\n  mkdirSync\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/node_modules/sharp/lib/libvips.js"],"names":["fs","require","os","path","spawnSync","semverCoerce","semverGreaterThanOrEqualTo","platform","env","process","minimumLibvipsVersionLabelled","npm_package_config_libvips","config","libvips","minimumLibvipsVersion","version","spawnSyncOptions","encoding","shell","mkdirSync","dirPath","recursive","err","code","cachePath","npmCachePath","npm_config_cache","APPDATA","join","homedir","libvipsCachePath","log","item","Error","console","error","message","isRosetta","arch","translated","stdout","trim","globalLibvipsVersion","pkgConfigPath","hasVendoredLibvips","vendorPath","__dirname","existsSync","brewPkgConfigPath","PKG_CONFIG_PATH","filter","p","useGlobalLibvips","Boolean","SHARP_IGNORE_GLOBAL_LIBVIPS","globalVipsVersion","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAP,CAAyBG,SAA3C;;AACA,MAAMC,YAAY,GAAGJ,OAAO,CAAC,yBAAD,CAA5B;;AACA,MAAMK,0BAA0B,GAAGL,OAAO,CAAC,sBAAD,CAA1C;;AAEA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CAAxB;;AAEA,MAAMO,GAAG,GAAGC,OAAO,CAACD,GAApB;;AACA,MAAME,6BAA6B,GAAGF,GAAG,CAACG,0BAAJ;AAAkC;AACtEV,OAAO,CAAC,iBAAD,CAAP,CAA2BW,MAA3B,CAAkCC,OADpC;;AAEA,MAAMC,qBAAqB,GAAGT,YAAY,CAACK,6BAAD,CAAZ,CAA4CK,OAA1E;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,MADa;AAEvBC,EAAAA,KAAK,EAAE;AAFgB,CAAzB;;AAKA,MAAMC,SAAS,GAAG,UAAUC,OAAV,EAAmB;AACnC,MAAI;AACFpB,IAAAA,EAAE,CAACmB,SAAH,CAAaC,OAAb,EAAsB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAtB;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,QAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,YAAMD,GAAN;AACD;AACF;AACF,CATD;;AAWA,MAAME,SAAS,GAAG,YAAY;AAC5B,QAAMC,YAAY,GAAGjB,GAAG,CAACkB,gBAAJ;AAAwB;AAC1ClB,EAAAA,GAAG,CAACmB,OAAJ,GAAcxB,IAAI,CAACyB,IAAL,CAAUpB,GAAG,CAACmB,OAAd,EAAuB,WAAvB,CAAd,GAAoDxB,IAAI,CAACyB,IAAL,CAAU1B,EAAE,CAAC2B,OAAH,EAAV,EAAwB,MAAxB,CADlC,CAArB;AAEAV,EAAAA,SAAS,CAACM,YAAD,CAAT;AACA,QAAMK,gBAAgB,GAAG3B,IAAI,CAACyB,IAAL,CAAUH,YAAV,EAAwB,UAAxB,CAAzB;AACAN,EAAAA,SAAS,CAACW,gBAAD,CAAT;AACA,SAAOA,gBAAP;AACD,CAPD;;AASA,MAAMC,GAAG,GAAG,UAAUC,IAAV,EAAgB;AAC1B,MAAIA,IAAI,YAAYC,KAApB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,KAAR,CAAe,8BAA6BH,IAAI,CAACI,OAAQ,EAAzD;AACD,GAFD,MAEO;AACLF,IAAAA,OAAO,CAACH,GAAR,CAAa,UAASC,IAAK,EAA3B;AACD;AACF,CAND;;AAQA,MAAMK,SAAS,GAAG,YAAY;AAC5B;AACA,MAAI5B,OAAO,CAACF,QAAR,KAAqB,QAArB,IAAiCE,OAAO,CAAC6B,IAAR,KAAiB,KAAtD,EAA6D;AAC3D,UAAMC,UAAU,GAAGnC,SAAS,CAAC,+BAAD,EAAkCY,gBAAlC,CAAT,CAA6DwB,MAAhF;AACA,WAAO,CAACD,UAAU,IAAI,EAAf,EAAmBE,IAAnB,OAA8B,2BAArC;AACD;;AACD,SAAO,KAAP;AACD,CAPD;;AASA,MAAMC,oBAAoB,GAAG,YAAY;AACvC,MAAIjC,OAAO,CAACF,QAAR,KAAqB,OAAzB,EAAkC;AAChC,UAAMmC,oBAAoB,GAAGtC,SAAS,CAAE,oBAAmBuC,aAAa,EAAG,oCAArC,EAA0E3B,gBAA1E,CAAT,CAAqGwB,MAAlI;AACA;;AACA,WAAO,CAACE,oBAAoB,IAAI,EAAzB,EAA6BD,IAA7B,EAAP;AACD,GAJD,MAIO;AACL,WAAO,EAAP;AACD;AACF,CARD;;AAUA,MAAMG,kBAAkB,GAAG,YAAY;AACrC,QAAMC,UAAU,GAAG1C,IAAI,CAACyB,IAAL,CAAUkB,SAAV,EAAqB,IAArB,EAA2B,QAA3B,EAAqChC,qBAArC,EAA4DP,QAAQ,EAApE,CAAnB;AACA,SAAOP,EAAE,CAAC+C,UAAH,CAAcF,UAAd,CAAP;AACD,CAHD;;AAKA,MAAMF,aAAa,GAAG,YAAY;AAChC,MAAIlC,OAAO,CAACF,QAAR,KAAqB,OAAzB,EAAkC;AAChC,UAAMyC,iBAAiB,GAAG5C,SAAS,CAAC,6EAAD,EAAgFY,gBAAhF,CAAT,CAA2GwB,MAA3G,IAAqH,EAA/I;AACA,WAAO,CAACQ,iBAAiB,CAACP,IAAlB,EAAD,EAA2BjC,GAAG,CAACyC,eAA/B,EAAgD,0BAAhD,EAA4E,oBAA5E,EACJC,MADI,CACG,UAAUC,CAAV,EAAa;AAAE,aAAO,CAAC,CAACA,CAAT;AAAa,KAD/B,EAEJvB,IAFI,CAEC,GAFD,CAAP;AAGD,GALD,MAKO;AACL,WAAO,EAAP;AACD;AACF,CATD;;AAWA,MAAMwB,gBAAgB,GAAG,YAAY;AACnC,MAAIC,OAAO,CAAC7C,GAAG,CAAC8C,2BAAL,CAAP,KAA6C,IAAjD,EAAuD;AACrD,WAAO,KAAP;AACD;AACD;;;AACA,MAAIjB,SAAS,EAAb,EAAiB;AACf,WAAO,KAAP;AACD;;AACD,QAAMkB,iBAAiB,GAAGb,oBAAoB,EAA9C;AACA,SAAO,CAAC,CAACa,iBAAF;AAAuB;AAC5BjD,EAAAA,0BAA0B,CAACiD,iBAAD,EAAoBzC,qBAApB,CAD5B;AAED,CAXD;;AAaA0C,MAAM,CAACC,OAAP,GAAiB;AACf3C,EAAAA,qBADe;AAEfJ,EAAAA,6BAFe;AAGfc,EAAAA,SAHe;AAIfO,EAAAA,GAJe;AAKfW,EAAAA,oBALe;AAMfE,EAAAA,kBANe;AAOfD,EAAAA,aAPe;AAQfS,EAAAA,gBARe;AASfjC,EAAAA;AATe,CAAjB","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst spawnSync = require('child_process').spawnSync;\nconst semverCoerce = require('semver/functions/coerce');\nconst semverGreaterThanOrEqualTo = require('semver/functions/gte');\n\nconst platform = require('./platform');\n\nconst env = process.env;\nconst minimumLibvipsVersionLabelled = env.npm_package_config_libvips || /* istanbul ignore next */\n  require('../package.json').config.libvips;\nconst minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;\n\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath, { recursive: true });\n  } catch (err) {\n    /* istanbul ignore next */\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n};\n\nconst cachePath = function () {\n  const npmCachePath = env.npm_config_cache || /* istanbul ignore next */\n    (env.APPDATA ? path.join(env.APPDATA, 'npm-cache') : path.join(os.homedir(), '.npm'));\n  mkdirSync(npmCachePath);\n  const libvipsCachePath = path.join(npmCachePath, '_libvips');\n  mkdirSync(libvipsCachePath);\n  return libvipsCachePath;\n};\n\nconst log = function (item) {\n  if (item instanceof Error) {\n    console.error(`sharp: Installation error: ${item.message}`);\n  } else {\n    console.log(`sharp: ${item}`);\n  }\n};\n\nconst isRosetta = function () {\n  /* istanbul ignore next */\n  if (process.platform === 'darwin' && process.arch === 'x64') {\n    const translated = spawnSync('sysctl sysctl.proc_translated', spawnSyncOptions).stdout;\n    return (translated || '').trim() === 'sysctl.proc_translated: 1';\n  }\n  return false;\n};\n\nconst globalLibvipsVersion = function () {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync(`PKG_CONFIG_PATH=\"${pkgConfigPath()}\" pkg-config --modversion vips-cpp`, spawnSyncOptions).stdout;\n    /* istanbul ignore next */\n    return (globalLibvipsVersion || '').trim();\n  } else {\n    return '';\n  }\n};\n\nconst hasVendoredLibvips = function () {\n  const vendorPath = path.join(__dirname, '..', 'vendor', minimumLibvipsVersion, platform());\n  return fs.existsSync(vendorPath);\n};\n\nconst pkgConfigPath = function () {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync('which brew >/dev/null 2>&1 && eval $(brew --env) && echo $PKG_CONFIG_LIBDIR', spawnSyncOptions).stdout || '';\n    return [brewPkgConfigPath.trim(), env.PKG_CONFIG_PATH, '/usr/local/lib/pkgconfig', '/usr/lib/pkgconfig']\n      .filter(function (p) { return !!p; })\n      .join(':');\n  } else {\n    return '';\n  }\n};\n\nconst useGlobalLibvips = function () {\n  if (Boolean(env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return false;\n  }\n  /* istanbul ignore next */\n  if (isRosetta()) {\n    return false;\n  }\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion && /* istanbul ignore next */\n    semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion,\n  minimumLibvipsVersionLabelled,\n  cachePath,\n  log,\n  globalLibvipsVersion,\n  hasVendoredLibvips,\n  pkgConfigPath,\n  useGlobalLibvips,\n  mkdirSync\n};\n"]},"metadata":{},"sourceType":"script"}