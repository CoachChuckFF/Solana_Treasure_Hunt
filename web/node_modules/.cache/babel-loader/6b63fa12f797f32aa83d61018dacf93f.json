{"ast":null,"code":"var _jsxFileName = \"/Users/drkrueger/Work/Mekamounts/MekaMountPFP/web/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import Mekamount, { runScript } from './createMekamount.js';\n\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport mekaHolder from './assets/meka.png';\nimport pfpHolder from './assets/pfp.png';\nimport download from 'downloadjs';\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst SERVER_PATH = '';\n\nconst App = () => {\n  _s();\n\n  // State\n  const [creditsLeft, setCreditsLeft] = useState(0);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [buildCount, setBuildCount] = useState(3);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [nftList, setNftList] = useState([]);\n\n  const getURLData = function () {\n    let baseURL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let requestedURL = baseURL + path + (params.length == 0 ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {\n          'accept': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then(response => {\n        response.json().then(data => {\n          resolve(data);\n        }).catch(error => {\n          reject(`Could not get JSON (${requestedURL})`);\n        });\n      }).catch(error => {\n        reject(`Could not get URL (${requestedURL})`);\n      });\n    });\n  };\n\n  const grabAllNFTs = () => {\n    if (!isGettingNFTS) {\n      setIsGettingNFTs(true);\n      getURLData(\"https://public-api.solscan.io\", \"/account/tokens\", {\n        account: `${walletAddress}`\n      }).then(data => {\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if (token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0) {\n            promises.push(getURLData(\"https://public-api.solscan.io\", `/account/${token.tokenAddress}`));\n          }\n        }); // Get Metadata on all\n\n        Promise.all(promises).then(nfts => {\n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft => {\n            try {\n              if (nft.metadata == null) {\n                throw new Error('No metadata');\n              }\n\n              if (nft.metadata.data.name == null) {\n                throw new Error('No name!');\n              }\n\n              if (nft.metadata.data.collection == null && nft.tokenInfo.symbol == null) {\n                throw new Error(nft.metadata.data.name + \" Bad collection\");\n              }\n\n              if (nft.metadata.data.image == null) {\n                throw new Error(nft.metadata.data.name + \" Bad image\");\n              }\n\n              if (nft.account == null) {\n                throw new Error(nft.metadata.data.name + \" Bad account\");\n              } //Fuck Collections\n\n\n              let collection = null;\n\n              if (nft.metadata.data.collection != null) {\n                if (typeof nft.metadata.data.collection === 'string') {\n                  collection = nft.metadata.data.collection;\n                } else {\n                  collection = nft.metadata.data.collection.name;\n                }\n              }\n\n              if (collection == null) collection = nft.tokenInfo.symbol;\n              if (collection == null) throw new Error(nft.metadata.data.name + \" Bad collection... Again\");\n              nftMetadata.push({\n                name: nft.metadata.data.name,\n                collection: collection,\n                url: nft.metadata.data.image,\n                address: nft.account\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }); //Sort\n\n          nftMetadata.sort((a, b) => {\n            return a.collection.localeCompare(b.collection);\n          }); //Update\n\n          setNftList(nftMetadata);\n          setIsGettingNFTs(false);\n        }).catch(error => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        });\n      }).catch(error => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      });\n    } else {\n      console.log(\"Crawling...\");\n    }\n  };\n\n  const getCreditsLeft = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/credits`);\n      const data = await response.json();\n      setCreditsLeft(data.credits);\n    } catch {\n      console.log(\"Could not grab credits\");\n    }\n  };\n\n  const clearIMG = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/clear/${walletAddress}`);\n      const data = await response.json();\n      console.log(data);\n    } catch {\n      console.log(\"Could not grab credits\");\n    }\n  };\n\n  const isChosenMek = nft => {\n    isChosenImg(nft, mekAddress);\n  };\n\n  const isChosenPFP = nft => {\n    isChosenImg(nft, pfpAddress);\n  };\n\n  const isChosenImg = (nft, slot) => {\n    if (slot == null) return false;\n    if (nft == null) return false;\n    return nft.address == slot.address;\n  };\n\n  const getMekaName = () => {\n    let mek = mekAddress == null ? '' : mekAddress.name;\n    let pfp = pfpAddress == null ? '' : pfpAddress.name;\n    let name = mek == null ? '' : 'Meka-';\n    name += pfp == null ? '' : pfp.split(' ')[0];\n    return \"\";\n  };\n\n  const downloadNewMek = async () => {\n    if (creditsLeft <= 0) {\n      alert('No more community credits! Tweet @Coach Chuck to request more');\n    } else if (buildCount <= 0) {\n      alert('No more builds! (But... you could refresh...)');\n    } else if (mekAddress == null || pfpAddress == null) {\n      alert('Need to pick both a Mekamount and PFP');\n    } else if (!isBuilding) {\n      setIsBuilding(true);\n\n      try {\n        const response = await fetch(`${SERVER_PATH}/sol/${walletAddress}/meka/${mekAddress.address}/pfp/${pfpAddress.address}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if (blob.size < 500) {\n          const data = await response.json();\n\n          if (data.error != null) {\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        } else {\n          download(blob, getMekaName() + \".png\");\n          setBuildCount(buildCount - 1);\n          getCreditsLeft();\n          clearIMG();\n        }\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n  const selectNFT = nft => {\n    if (nft.name.includes(\"Mekamounts\")) {\n      setMekAddress(nft);\n    } else {\n      setPfpAddress(nft);\n    }\n  };\n\n  const mekSort = nft => {\n    return nft.name.includes(\"Mekamounts\");\n  };\n\n  const pfpSort = nft => {\n    return !nft.name.includes(\"Mekamounts\");\n  };\n\n  const getPFPList = sortFunction => {\n    return nftList.filter(sortFunction);\n  };\n\n  const renderNFTContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://www.magiceden.io/marketplace/mekamounts\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-text\",\n        children: getPFPList(mekSort).length > 0 ? \"Choose your Mekamount...\" : \"You have no Mekamounts... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 65\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: getPFPList(mekSort).map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        onClick: () => {\n          selectNFT(nft);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.url,\n            alt: nft.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mekAddress == null ? 'selection-overlay' : mekAddress.address != nft.address ? 'selection-overlay' : 'selected'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-spacing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://www.magiceden.io/marketplace/pesky_penguins\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sub-text\",\n        children: getPFPList(pfpSort).length > 0 ? \"Choose your PFP...\" : \"You have no PFPs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 69\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: getPFPList(pfpSort).map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        onClick: () => {\n          selectNFT(nft);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.url,\n            alt: nft.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: pfpAddress == null ? 'selection-overlay' : pfpAddress.address != nft.address ? 'selection-overlay' : 'selected'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-spacing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n\n  const renderLoadingContainer = () => /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"sub-text\",\n    children: \"Loading NFTs...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: mekAddress == null ? mekaHolder : mekAddress.url,\n          alt: mekaHolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: mekAddress == null ? \"\" : \"Mekamount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, \"meka\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: pfpAddress == null ? pfpHolder : pfpAddress.url,\n          alt: pfpHolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: pfpAddress == null ? \"\" : \"PFP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, \"pfp\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mini-spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: getMekaName()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"cta-button submit-gif-button\",\n      onClick: downloadNewMek,\n      disabled: isBuilding,\n      children: isBuilding ? `Building...` : `Build [${buildCount}]`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: [\"Hello \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), isGettingNFTS ? renderLoadingContainer() : renderNFTContainer(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this); // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this); // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n      await getCreditsLeft();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching NFTs...'); // Call Solana program here.\n\n      grabAllNFTs(); // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83E\\uDDBE Mekamount PFP Portal \\uD83E\\uDDBE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: [\"[CR Left: \", creditsLeft, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"N F T \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spacing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `Crafted By @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"4kitLubJOf8KKuXXLFzds0aANPc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/drkrueger/Work/Mekamounts/MekaMountPFP/web/src/App.js"],"names":["React","useEffect","useState","querystring","twitterLogo","mekaHolder","pfpHolder","download","TWITTER_HANDLE","TWITTER_LINK","SERVER_PATH","App","creditsLeft","setCreditsLeft","walletAddress","setWalletAddress","mekAddress","setMekAddress","pfpAddress","setPfpAddress","pfpScale","setPfpScale","isBuilding","setIsBuilding","buildCount","setBuildCount","isGettingNFTS","setIsGettingNFTs","nftList","setNftList","getURLData","baseURL","path","params","requestedURL","length","stringify","Promise","resolve","reject","fetch","method","cache","headers","redirect","referrerPolicy","then","response","json","data","catch","error","grabAllNFTs","account","promises","forEach","token","tokenAmount","amount","decimals","push","tokenAddress","all","nfts","nftMetadata","nft","metadata","Error","name","collection","tokenInfo","symbol","image","url","address","console","log","sort","a","b","localeCompare","alert","getCreditsLeft","credits","clearIMG","isChosenMek","isChosenImg","isChosenPFP","slot","getMekaName","mek","pfp","split","downloadNewMek","blob","size","selectNFT","includes","mekSort","pfpSort","getPFPList","sortFunction","filter","renderNFTContainer","map","renderLoadingContainer","renderConnectedContainer","checkIfWalletIsConnected","solana","window","isPhantom","connect","onlyIfTrusted","publicKey","toString","connectWallet","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import Mekamount, { runScript } from './createMekamount.js';\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport mekaHolder from './assets/meka.png';\nimport pfpHolder from './assets/pfp.png';\nimport download from 'downloadjs';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst SERVER_PATH = '';\n\nconst App = () => {\n  // State\n  const [creditsLeft, setCreditsLeft] = useState(0);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [buildCount, setBuildCount] = useState(3);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [nftList, setNftList] = useState([]);\n\n  const getURLData = (baseURL = '', path = '', params = {}) => {\n    let requestedURL = baseURL + path + ((params.length == 0) ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {'accept': 'application/json'},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      }).then((response) => {\n        response.json().then((data)=>{\n          resolve(data);\n        })\n        .catch((error) => {reject(`Could not get JSON (${requestedURL})`);});\n      })\n      .catch((error) => {reject(`Could not get URL (${requestedURL})`);});\n    });\n  }\n\n  const grabAllNFTs = () => {\n    if(!isGettingNFTS){\n      setIsGettingNFTs(true);\n      getURLData(\n        \"https://public-api.solscan.io\",\n        \"/account/tokens\",\n        { account: `${walletAddress}`,},\n      ).then((data) => {\n\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if(token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0){\n            promises.push(\n              getURLData(\n                \"https://public-api.solscan.io\",\n                `/account/${token.tokenAddress}`,\n              )\n            );\n          }\n        });\n\n        // Get Metadata on all\n        Promise.all(promises)\n        .then((nfts)=>{\n          \n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft=> {\n            try{\n              if(nft.metadata == null){throw new Error('No metadata');}\n              if(nft.metadata.data.name == null){throw new Error('No name!');}\n              if(nft.metadata.data.collection == null && nft.tokenInfo.symbol == null){throw new Error(nft.metadata.data.name + \" Bad collection\");}\n              if(nft.metadata.data.image == null){throw new Error(nft.metadata.data.name + \" Bad image\");}\n              if(nft.account == null){throw new Error(nft.metadata.data.name + \" Bad account\");}\n\n              //Fuck Collections\n              let collection = null;\n              if(nft.metadata.data.collection != null){\n                if(typeof nft.metadata.data.collection === 'string'){\n                  collection = nft.metadata.data.collection;\n                } else {\n                  collection = nft.metadata.data.collection.name;\n                }\n              }\n              if(collection == null) collection = nft.tokenInfo.symbol;\n              if(collection == null) throw new Error(nft.metadata.data.name + \" Bad collection... Again\");\n\n              nftMetadata.push(\n                {\n                  name : nft.metadata.data.name, \n                  collection : collection,\n                  url : nft.metadata.data.image,\n                  address : nft.account,\n                }\n              );\n            } catch (error){\n              console.log(error);\n            }\n          });\n\n          //Sort\n          nftMetadata.sort((a, b)=>{\n            return a.collection.localeCompare(b.collection);\n          });\n\n          //Update\n          setNftList(nftMetadata);\n          setIsGettingNFTs(false);\n        })\n        .catch((error) => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        })\n\n      })\n      .catch((error) => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      })\n    } else {\n      console.log(\"Crawling...\")\n    }\n  }\n\n  const getCreditsLeft = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/credits`);\n      const data = await response.json();\n      setCreditsLeft(data.credits);\n    } catch {\n      console.log(\"Could not grab credits\");\n    }\n  }\n\n  const clearIMG = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/clear/${walletAddress}`);\n      const data = await response.json();\n      console.log(data);\n    } catch {\n      console.log(\"Could not grab credits\");\n    }\n  }\n\n  const isChosenMek = (nft) => {isChosenImg(nft, mekAddress)}\n  const isChosenPFP = (nft) => {isChosenImg(nft, pfpAddress)}\n  const isChosenImg = (nft, slot) => {\n    if(slot == null) return false;\n    if(nft == null) return false;\n    return nft.address == slot.address;\n  }\n\n  const getMekaName = () => {\n    let mek = (mekAddress == null) ? '' : mekAddress.name;\n    let pfp = (pfpAddress == null) ? '' : pfpAddress.name;\n\n    let name = (mek == null) ? '' : 'Meka-';\n    name += (pfp == null) ? '' : pfp.split(' ')[0];\n    return \"\";\n  }\n\n  const downloadNewMek = async () => {\n    if(creditsLeft <= 0){\n      alert('No more community credits! Tweet @Coach Chuck to request more');\n    } else if(buildCount <= 0){\n      alert('No more builds! (But... you could refresh...)');\n    } else if(mekAddress == null || pfpAddress == null){\n      alert('Need to pick both a Mekamount and PFP');\n    } else if(!isBuilding){\n      setIsBuilding(true);\n      try {\n        const response = await fetch(`${SERVER_PATH}/sol/${walletAddress}/meka/${mekAddress.address}/pfp/${pfpAddress.address}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if(blob.size < 500){\n          const data = await response.json();\n          if(data.error != null){\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        } else {\n          download(blob, getMekaName() + \".png\");\n          setBuildCount(buildCount - 1);\n          getCreditsLeft();\n          clearIMG();\n        }\n\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n\n  const selectNFT = (nft) => {\n\n    if(nft.name.includes(\"Mekamounts\")){\n      setMekAddress(nft);\n    } else {\n      setPfpAddress(nft);\n    }\n    \n  }\n\n  const mekSort = (nft) => {return nft.name.includes(\"Mekamounts\");}\n  const pfpSort = (nft) => {return !nft.name.includes(\"Mekamounts\");}\n  const getPFPList = (sortFunction) => {return nftList.filter(sortFunction);}\n\n  const renderNFTContainer = () => (\n    <div>\n      <a href='https://www.magiceden.io/marketplace/mekamounts'><p className=\"sub-text\">{getPFPList(mekSort).length > 0 ? \"Choose your Mekamount...\" : \"You have no Mekamounts... \"}</p></a>\n      <div className=\"gif-grid\">\n        {getPFPList(mekSort).map((nft) => (\n          <div className={\"gif-item\"} key={nft.url} onClick={() => {selectNFT(nft)}}>\n            <div className='overlay'>\n              <img src={nft.url} alt={nft.url}/>\n              <div className={(mekAddress == null) ? 'selection-overlay' : ((mekAddress.address != nft.address) ? 'selection-overlay' : 'selected')}></div>\n            </div>\n            <p className=\"sub-text\">{nft.name}</p>\n            <div className='mini-spacing'></div>\n          </div>\n        ))}\n      </div>\n      <a href='https://www.magiceden.io/marketplace/pesky_penguins'><p className=\"sub-text\">{getPFPList(pfpSort).length > 0 ? \"Choose your PFP...\" : \"You have no PFPs...\"}</p></a>\n      <div className=\"gif-grid\">\n        {getPFPList(pfpSort).map((nft) => (\n          <div className={\"gif-item\"} key={nft.url} onClick={() => {selectNFT(nft)}}>\n            <div className='overlay'>\n              <img src={nft.url} alt={nft.url}/>\n              <div className={(pfpAddress == null) ? 'selection-overlay' : ((pfpAddress.address != nft.address) ? 'selection-overlay' : 'selected')}></div>\n            </div>\n            <p className=\"sub-text\">{nft.name}</p>\n            <div className='mini-spacing'></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderLoadingContainer = () => (\n    <p className=\"sub-text\">Loading NFTs...</p>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n        <div className=\"selected-grid\">\n        {<div className=\"selected-item\" key={\"meka\"}>\n          <img src={mekAddress == null ? mekaHolder : mekAddress.url} alt={mekaHolder} />\n          <p className=\"sub-text\">{mekAddress == null ? \"\" : \"Mekamount\"}</p>\n        </div>}\n        {<div className=\"selected-item\" key={\"pfp\"}>\n          <img src={pfpAddress == null ? pfpHolder : pfpAddress.url} alt={pfpHolder} />\n          <p className=\"sub-text\">{pfpAddress == null ? \"\" : \"PFP\"}</p>\n        </div>}\n      </div>\n      <div className='mini-spacing'></div>\n      <p className=\"sub-text\">{getMekaName()}</p>\n      <button type=\"submit\" className=\"cta-button submit-gif-button\" onClick={downloadNewMek} disabled={isBuilding}>\n        {(isBuilding ? `Building...` : `Build [${buildCount}]`)}\n      </button>\n      <div className='spacing'></div>\n      <p className=\"sub-text\">Hello {walletAddress}</p>\n      {(isGettingNFTS) ? renderLoadingContainer() : renderNFTContainer()}\n      <div className='spacing'></div>\n    </div>\n  );\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n      await getCreditsLeft();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching NFTs...');\n      \n      // Call Solana program here.\n      grabAllNFTs();\n  \n      // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🦾 Mekamount PFP Portal 🦾</p>\n          <p className=\"header\">[CR Left: {creditsLeft}]</p>\n          <p className=\"sub-text\">\n            N F T ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className='spacing'></div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Crafted By @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}