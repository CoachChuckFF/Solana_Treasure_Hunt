{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst is = require('./is');\n\nconst sharp = require('./sharp');\n\nconst formats = new Map([['heic', 'heif'], ['heif', 'heif'], ['avif', 'avif'], ['jpeg', 'jpeg'], ['jpg', 'jpeg'], ['png', 'png'], ['raw', 'raw'], ['tiff', 'tiff'], ['tif', 'tiff'], ['webp', 'webp'], ['gif', 'gif'], ['jp2', 'jp2'], ['jpx', 'jp2'], ['j2k', 'jp2'], ['j2c', 'jp2']]);\nconst errMagickSave = new Error('GIF output requires libvips with support for ImageMagick');\nconst errJp2Save = new Error('JP2 output requires libvips with support for OpenJPEG');\n/**\n * Write output image data to a file.\n *\n * If an explicit output format is not selected, it will be inferred from the extension,\n * with JPEG, PNG, WebP, AVIF, TIFF, DZI, and libvips' V format supported.\n * Note that raw pixel data is only supported for buffer output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * The caller is responsible for ensuring directory structures and permissions exist.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toFile('output.png', (err, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toFile('output.png')\n *   .then(info => { ... })\n *   .catch(err => { ... });\n *\n * @param {string} fileOut - the path to write the image data to.\n * @param {Function} [callback] - called on completion with two arguments `(err, info)`.\n * `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n * @returns {Promise<Object>} - when no callback is provided\n * @throws {Error} Invalid parameters\n */\n\nfunction toFile(fileOut, callback) {\n  let err;\n\n  if (!is.string(fileOut)) {\n    err = new Error('Missing output file path');\n  } else if (is.string(this.options.input.file) && path.resolve(this.options.input.file) === path.resolve(fileOut)) {\n    err = new Error('Cannot use same file for input and output');\n  } else if (this.options.formatOut === 'input' && fileOut.toLowerCase().endsWith('.gif') && !this.constructor.format.magick.output.file) {\n    err = errMagickSave;\n  }\n\n  if (err) {\n    if (is.fn(callback)) {\n      callback(err);\n    } else {\n      return Promise.reject(err);\n    }\n  } else {\n    this.options.fileOut = fileOut;\n    return this._pipeline(callback);\n  }\n\n  return this;\n}\n/**\n * Write output to a Buffer.\n * JPEG, PNG, WebP, AVIF, TIFF and raw pixel data output are supported.\n *\n * If no explicit format is set, the output format will match the input image, except GIF and SVG input which become PNG output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * `callback`, if present, gets three arguments `(err, data, info)` where:\n * - `err` is an error, if any.\n * - `data` is the output image data.\n * - `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toBuffer((err, data, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer()\n *   .then(data => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer({ resolveWithObject: true })\n *   .then(({ data, info }) => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * const { data, info } = await sharp('my-image.jpg')\n *   // output the raw pixels\n *   .raw()\n *   .toBuffer({ resolveWithObject: true });\n *\n * // create a more type safe way to work with the raw pixel data\n * // this will not copy the data, instead it will change `data`s underlying ArrayBuffer\n * // so `data` and `pixelArray` point to the same memory location\n * const pixelArray = new Uint8ClampedArray(data.buffer);\n *\n * // When you are done changing the pixelArray, sharp takes the `pixelArray` as an input\n * const { width, height, channels } = info;\n * await sharp(pixelArray, { raw: { width, height, channels } })\n *   .toFile('my-changed-image.jpg');\n *\n * @param {Object} [options]\n * @param {boolean} [options.resolveWithObject] Resolve the Promise with an Object containing `data` and `info` properties instead of resolving only with `data`.\n * @param {Function} [callback]\n * @returns {Promise<Buffer>} - when no callback is provided\n */\n\n\nfunction toBuffer(options, callback) {\n  if (is.object(options)) {\n    this._setBooleanOption('resolveWithObject', options.resolveWithObject);\n  } else if (this.options.resolveWithObject) {\n    this.options.resolveWithObject = false;\n  }\n\n  return this._pipeline(is.fn(options) ? options : callback);\n}\n/**\n * Include all metadata (EXIF, XMP, IPTC) from the input image in the output image.\n * This will also convert to and add a web-friendly sRGB ICC profile unless a custom\n * output profile is provided.\n *\n * The default behaviour, when `withMetadata` is not used, is to convert to the device-independent\n * sRGB colour space and strip all metadata, including the removal of any ICC profile.\n *\n * @example\n * sharp('input.jpg')\n *   .withMetadata()\n *   .toFile('output-with-metadata.jpg')\n *   .then(info => { ... });\n *\n * @example\n * // Set \"IFD0-Copyright\" in output EXIF metadata\n * const data = await sharp(input)\n *   .withMetadata({\n *     exif: {\n *       IFD0: {\n *         Copyright: 'Wernham Hogg'\n *       }\n *     }\n *   })\n *   .toBuffer();\n *\n *  * @example\n * // Set output metadata to 96 DPI\n * const data = await sharp(input)\n *   .withMetadata({ density: 96 })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.orientation] value between 1 and 8, used to update the EXIF `Orientation` tag.\n * @param {string} [options.icc] filesystem path to output ICC profile, defaults to sRGB.\n * @param {Object<Object>} [options.exif={}] Object keyed by IFD0, IFD1 etc. of key/value string pairs to write as EXIF data.\n * @param {number} [options.density] Number of pixels per inch (DPI).\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction withMetadata(options) {\n  this.options.withMetadata = is.bool(options) ? options : true;\n\n  if (is.object(options)) {\n    if (is.defined(options.orientation)) {\n      if (is.integer(options.orientation) && is.inRange(options.orientation, 1, 8)) {\n        this.options.withMetadataOrientation = options.orientation;\n      } else {\n        throw is.invalidParameterError('orientation', 'integer between 1 and 8', options.orientation);\n      }\n    }\n\n    if (is.defined(options.density)) {\n      if (is.number(options.density) && options.density > 0) {\n        this.options.withMetadataDensity = options.density;\n      } else {\n        throw is.invalidParameterError('density', 'positive number', options.density);\n      }\n    }\n\n    if (is.defined(options.icc)) {\n      if (is.string(options.icc)) {\n        this.options.withMetadataIcc = options.icc;\n      } else {\n        throw is.invalidParameterError('icc', 'string filesystem path to ICC profile', options.icc);\n      }\n    }\n\n    if (is.defined(options.exif)) {\n      if (is.object(options.exif)) {\n        for (const [ifd, entries] of Object.entries(options.exif)) {\n          if (is.object(entries)) {\n            for (const [k, v] of Object.entries(entries)) {\n              if (is.string(v)) {\n                this.options.withMetadataStrs[`exif-${ifd.toLowerCase()}-${k}`] = v;\n              } else {\n                throw is.invalidParameterError(`exif.${ifd}.${k}`, 'string', v);\n              }\n            }\n          } else {\n            throw is.invalidParameterError(`exif.${ifd}`, 'object', entries);\n          }\n        }\n      } else {\n        throw is.invalidParameterError('exif', 'object', options.exif);\n      }\n    }\n  }\n\n  return this;\n}\n/**\n * Force output to a given format.\n *\n * @example\n * // Convert any input to PNG output\n * const data = await sharp(input)\n *   .toFormat('png')\n *   .toBuffer();\n *\n * @param {(string|Object)} format - as a string or an Object with an 'id' attribute\n * @param {Object} options - output options\n * @returns {Sharp}\n * @throws {Error} unsupported format or options\n */\n\n\nfunction toFormat(format, options) {\n  const actualFormat = formats.get((is.object(format) && is.string(format.id) ? format.id : format).toLowerCase());\n\n  if (!actualFormat) {\n    throw is.invalidParameterError('format', `one of: ${[...formats.keys()].join(', ')}`, format);\n  }\n\n  return this[actualFormat](options);\n}\n/**\n * Use these JPEG options for output image.\n *\n * @example\n * // Convert any input to very high quality JPEG output\n * const data = await sharp(input)\n *   .jpeg({\n *     quality: 100,\n *     chromaSubsampling: '4:4:4'\n *   })\n *   .toBuffer();\n *\n * @example\n * // Use mozjpeg to reduce output JPEG file size (slower)\n * const data = await sharp(input)\n *   .jpeg({ mozjpeg: true })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling\n * @param {boolean} [options.optimiseCoding=true] - optimise Huffman coding tables\n * @param {boolean} [options.optimizeCoding=true] - alternative spelling of optimiseCoding\n * @param {boolean} [options.mozjpeg=false] - use mozjpeg defaults, equivalent to `{ trellisQuantisation: true, overshootDeringing: true, optimiseScans: true, quantisationTable: 3 }`\n * @param {boolean} [options.trellisQuantisation=false] - apply trellis quantisation\n * @param {boolean} [options.overshootDeringing=false] - apply overshoot deringing\n * @param {boolean} [options.optimiseScans=false] - optimise progressive scans, forces progressive\n * @param {boolean} [options.optimizeScans=false] - alternative spelling of optimiseScans\n * @param {number} [options.quantisationTable=0] - quantization table to use, integer 0-8\n * @param {number} [options.quantizationTable=0] - alternative spelling of quantisationTable\n * @param {boolean} [options.force=true] - force JPEG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction jpeg(options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.jpegQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('jpegProgressive', options.progressive);\n    }\n\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.jpegChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n\n    const optimiseCoding = is.bool(options.optimizeCoding) ? options.optimizeCoding : options.optimiseCoding;\n\n    if (is.defined(optimiseCoding)) {\n      this._setBooleanOption('jpegOptimiseCoding', optimiseCoding);\n    }\n\n    if (is.defined(options.mozjpeg)) {\n      if (is.bool(options.mozjpeg)) {\n        if (options.mozjpeg) {\n          this.options.jpegTrellisQuantisation = true;\n          this.options.jpegOvershootDeringing = true;\n          this.options.jpegOptimiseScans = true;\n          this.options.jpegProgressive = true;\n          this.options.jpegQuantisationTable = 3;\n        }\n      } else {\n        throw is.invalidParameterError('mozjpeg', 'boolean', options.mozjpeg);\n      }\n    }\n\n    const trellisQuantisation = is.bool(options.trellisQuantization) ? options.trellisQuantization : options.trellisQuantisation;\n\n    if (is.defined(trellisQuantisation)) {\n      this._setBooleanOption('jpegTrellisQuantisation', trellisQuantisation);\n    }\n\n    if (is.defined(options.overshootDeringing)) {\n      this._setBooleanOption('jpegOvershootDeringing', options.overshootDeringing);\n    }\n\n    const optimiseScans = is.bool(options.optimizeScans) ? options.optimizeScans : options.optimiseScans;\n\n    if (is.defined(optimiseScans)) {\n      this._setBooleanOption('jpegOptimiseScans', optimiseScans);\n\n      if (optimiseScans) {\n        this.options.jpegProgressive = true;\n      }\n    }\n\n    const quantisationTable = is.number(options.quantizationTable) ? options.quantizationTable : options.quantisationTable;\n\n    if (is.defined(quantisationTable)) {\n      if (is.integer(quantisationTable) && is.inRange(quantisationTable, 0, 8)) {\n        this.options.jpegQuantisationTable = quantisationTable;\n      } else {\n        throw is.invalidParameterError('quantisationTable', 'integer between 0 and 8', quantisationTable);\n      }\n    }\n  }\n\n  return this._updateFormatOut('jpeg', options);\n}\n/**\n * Use these PNG options for output image.\n *\n * By default, PNG output is full colour at 8 or 16 bits per pixel.\n * Indexed PNG input at 1, 2 or 4 bits per pixel is converted to 8 bits per pixel.\n * Set `palette` to `true` for slower, indexed PNG output.\n *\n * @example\n * // Convert any input to full colour PNG output\n * const data = await sharp(input)\n *   .png()\n *   .toBuffer();\n *\n * @example\n * // Convert any input to indexed PNG output (slower)\n * const data = await sharp(input)\n *   .png({ palette: true })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {number} [options.compressionLevel=6] - zlib compression level, 0 (fastest, largest) to 9 (slowest, smallest)\n * @param {boolean} [options.adaptiveFiltering=false] - use adaptive row filtering\n * @param {boolean} [options.palette=false] - quantise to a palette-based image with alpha transparency support\n * @param {number} [options.quality=100] - use the lowest number of colours needed to achieve given quality, sets `palette` to `true`\n * @param {number} [options.colours=256] - maximum number of palette entries, sets `palette` to `true`\n * @param {number} [options.colors=256] - alternative spelling of `options.colours`, sets `palette` to `true`\n * @param {number} [options.dither=1.0] - level of Floyd-Steinberg error diffusion, sets `palette` to `true`\n * @param {boolean} [options.force=true] - force PNG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction png(options) {\n  if (is.object(options)) {\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('pngProgressive', options.progressive);\n    }\n\n    if (is.defined(options.compressionLevel)) {\n      if (is.integer(options.compressionLevel) && is.inRange(options.compressionLevel, 0, 9)) {\n        this.options.pngCompressionLevel = options.compressionLevel;\n      } else {\n        throw is.invalidParameterError('compressionLevel', 'integer between 0 and 9', options.compressionLevel);\n      }\n    }\n\n    if (is.defined(options.adaptiveFiltering)) {\n      this._setBooleanOption('pngAdaptiveFiltering', options.adaptiveFiltering);\n    }\n\n    if (is.defined(options.palette)) {\n      this._setBooleanOption('pngPalette', options.palette);\n    } else if (is.defined(options.quality) || is.defined(options.colours || options.colors) || is.defined(options.dither)) {\n      this._setBooleanOption('pngPalette', true);\n    }\n\n    if (this.options.pngPalette) {\n      if (is.defined(options.quality)) {\n        if (is.integer(options.quality) && is.inRange(options.quality, 0, 100)) {\n          this.options.pngQuality = options.quality;\n        } else {\n          throw is.invalidParameterError('quality', 'integer between 0 and 100', options.quality);\n        }\n      }\n\n      const colours = options.colours || options.colors;\n\n      if (is.defined(colours)) {\n        if (is.integer(colours) && is.inRange(colours, 2, 256)) {\n          this.options.pngBitdepth = 1 << 31 - Math.clz32(Math.ceil(Math.log2(colours)));\n        } else {\n          throw is.invalidParameterError('colours', 'integer between 2 and 256', colours);\n        }\n      }\n\n      if (is.defined(options.dither)) {\n        if (is.number(options.dither) && is.inRange(options.dither, 0, 1)) {\n          this.options.pngDither = options.dither;\n        } else {\n          throw is.invalidParameterError('dither', 'number between 0.0 and 1.0', options.dither);\n        }\n      }\n    }\n  }\n\n  return this._updateFormatOut('png', options);\n}\n/**\n * Use these WebP options for output image.\n *\n * @example\n * // Convert any input to lossless WebP output\n * const data = await sharp(input)\n *   .webp({ lossless: true })\n *   .toBuffer();\n *\n * @example\n * // Optimise the file size of an animated WebP\n * const outputWebp = await sharp(inputWebp, { animated: true })\n *   .webp({ reductionEffort: 6 })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {number} [options.alphaQuality=100] - quality of alpha layer, integer 0-100\n * @param {boolean} [options.lossless=false] - use lossless compression mode\n * @param {boolean} [options.nearLossless=false] - use near_lossless compression mode\n * @param {boolean} [options.smartSubsample=false] - use high quality chroma subsampling\n * @param {number} [options.reductionEffort=4] - level of CPU effort to reduce file size, integer 0-6\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force WebP output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction webp(options) {\n  if (is.object(options) && is.defined(options.quality)) {\n    if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n      this.options.webpQuality = options.quality;\n    } else {\n      throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n    }\n  }\n\n  if (is.object(options) && is.defined(options.alphaQuality)) {\n    if (is.integer(options.alphaQuality) && is.inRange(options.alphaQuality, 0, 100)) {\n      this.options.webpAlphaQuality = options.alphaQuality;\n    } else {\n      throw is.invalidParameterError('alphaQuality', 'integer between 0 and 100', options.alphaQuality);\n    }\n  }\n\n  if (is.object(options) && is.defined(options.lossless)) {\n    this._setBooleanOption('webpLossless', options.lossless);\n  }\n\n  if (is.object(options) && is.defined(options.nearLossless)) {\n    this._setBooleanOption('webpNearLossless', options.nearLossless);\n  }\n\n  if (is.object(options) && is.defined(options.smartSubsample)) {\n    this._setBooleanOption('webpSmartSubsample', options.smartSubsample);\n  }\n\n  if (is.object(options) && is.defined(options.reductionEffort)) {\n    if (is.integer(options.reductionEffort) && is.inRange(options.reductionEffort, 0, 6)) {\n      this.options.webpReductionEffort = options.reductionEffort;\n    } else {\n      throw is.invalidParameterError('reductionEffort', 'integer between 0 and 6', options.reductionEffort);\n    }\n  }\n\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('webp', options);\n}\n/**\n * Use these GIF options for output image.\n *\n * Requires libvips compiled with support for ImageMagick or GraphicsMagick.\n * The prebuilt binaries do not include this - see\n * {@link https://sharp.pixelplumbing.com/install#custom-libvips installing a custom libvips}.\n *\n * @param {Object} [options] - output options\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force GIF output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n/* istanbul ignore next */\n\n\nfunction gif(options) {\n  if (!this.constructor.format.magick.output.buffer) {\n    throw errMagickSave;\n  }\n\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('gif', options);\n}\n/**\n * Use these JP2 options for output image.\n *\n * Requires libvips compiled with support for OpenJPEG.\n * The prebuilt binaries do not include this - see\n * {@link https://sharp.pixelplumbing.com/install#custom-libvips installing a custom libvips}.\n *\n * @example\n * // Convert any input to lossless JP2 output\n * const data = await sharp(input)\n *   .jp2({ lossless: true })\n *   .toBuffer();\n *\n * @example\n * // Convert any input to very high quality JP2 output\n * const data = await sharp(input)\n *   .jp2({\n *     quality: 100,\n *     chromaSubsampling: '4:4:4'\n *   })\n *   .toBuffer();\n *\n * @since 0.29.1\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.lossless=false] - use lossless compression mode\n * @param {number} [options.tileWidth=512] - horizontal tile size\n * @param {number} [options.tileHeight=512] - vertical tile size\n * @param {string} [options.chromaSubsampling='4:4:4'] - set to '4:2:0' to use chroma subsampling\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n/* istanbul ignore next */\n\n\nfunction jp2(options) {\n  if (!this.constructor.format.jp2k.output.buffer) {\n    throw errJp2Save;\n  }\n\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.jp2Quality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.lossless)) {\n      if (is.bool(options.lossless)) {\n        this.options.jp2Lossless = options.lossless;\n      } else {\n        throw is.invalidParameterError('lossless', 'boolean', options.lossless);\n      }\n    }\n\n    if (is.defined(options.tileWidth)) {\n      if (is.integer(options.tileWidth) && is.inRange(options.tileWidth, 1, 32768)) {\n        this.options.jp2TileWidth = options.tileWidth;\n      } else {\n        throw is.invalidParameterError('tileWidth', 'integer between 1 and 32768', options.tileWidth);\n      }\n    }\n\n    if (is.defined(options.tileHeight)) {\n      if (is.integer(options.tileHeight) && is.inRange(options.tileHeight, 1, 32768)) {\n        this.options.jp2TileHeight = options.tileHeight;\n      } else {\n        throw is.invalidParameterError('tileHeight', 'integer between 1 and 32768', options.tileHeight);\n      }\n    }\n\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.heifChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n  }\n\n  return this._updateFormatOut('jp2', options);\n}\n/**\n * Set animation options if available.\n * @private\n *\n * @param {Object} [source] - output options\n * @param {number} [source.pageHeight] - page height for animated output\n * @param {number} [source.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [source.delay] - list of delays between animation frames (in milliseconds)\n * @param {Object} [target] - target object for valid options\n * @throws {Error} Invalid options\n */\n\n\nfunction trySetAnimationOptions(source, target) {\n  if (is.object(source) && is.defined(source.pageHeight)) {\n    if (is.integer(source.pageHeight) && source.pageHeight > 0) {\n      target.pageHeight = source.pageHeight;\n    } else {\n      throw is.invalidParameterError('pageHeight', 'integer larger than 0', source.pageHeight);\n    }\n  }\n\n  if (is.object(source) && is.defined(source.loop)) {\n    if (is.integer(source.loop) && is.inRange(source.loop, 0, 65535)) {\n      target.loop = source.loop;\n    } else {\n      throw is.invalidParameterError('loop', 'integer between 0 and 65535', source.loop);\n    }\n  }\n\n  if (is.object(source) && is.defined(source.delay)) {\n    if (Array.isArray(source.delay) && source.delay.every(is.integer) && source.delay.every(v => is.inRange(v, 0, 65535))) {\n      target.delay = source.delay;\n    } else {\n      throw is.invalidParameterError('delay', 'array of integers between 0 and 65535', source.delay);\n    }\n  }\n}\n/**\n * Use these TIFF options for output image.\n *\n * The `density` can be set in pixels/inch via {@link withMetadata} instead of providing `xres` and `yres` in pixels/mm.\n *\n * @example\n * // Convert SVG input to LZW-compressed, 1 bit per pixel TIFF output\n * sharp('input.svg')\n *   .tiff({\n *     compression: 'lzw',\n *     bitdepth: 1\n *   })\n *   .toFile('1-bpp-output.tiff')\n *   .then(info => { ... });\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.force=true] - force TIFF output, otherwise attempt to use input format\n * @param {string} [options.compression='jpeg'] - compression options: lzw, deflate, jpeg, ccittfax4\n * @param {string} [options.predictor='horizontal'] - compression predictor options: none, horizontal, float\n * @param {boolean} [options.pyramid=false] - write an image pyramid\n * @param {boolean} [options.tile=false] - write a tiled tiff\n * @param {number} [options.tileWidth=256] - horizontal tile size\n * @param {number} [options.tileHeight=256] - vertical tile size\n * @param {number} [options.xres=1.0] - horizontal resolution in pixels/mm\n * @param {number} [options.yres=1.0] - vertical resolution in pixels/mm\n * @param {number} [options.bitdepth=8] - reduce bitdepth to 1, 2 or 4 bit\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction tiff(options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.tiffQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.bitdepth)) {\n      if (is.integer(options.bitdepth) && is.inArray(options.bitdepth, [1, 2, 4, 8])) {\n        this.options.tiffBitdepth = options.bitdepth;\n      } else {\n        throw is.invalidParameterError('bitdepth', '1, 2, 4 or 8', options.bitdepth);\n      }\n    } // tiling\n\n\n    if (is.defined(options.tile)) {\n      this._setBooleanOption('tiffTile', options.tile);\n    }\n\n    if (is.defined(options.tileWidth)) {\n      if (is.integer(options.tileWidth) && options.tileWidth > 0) {\n        this.options.tiffTileWidth = options.tileWidth;\n      } else {\n        throw is.invalidParameterError('tileWidth', 'integer greater than zero', options.tileWidth);\n      }\n    }\n\n    if (is.defined(options.tileHeight)) {\n      if (is.integer(options.tileHeight) && options.tileHeight > 0) {\n        this.options.tiffTileHeight = options.tileHeight;\n      } else {\n        throw is.invalidParameterError('tileHeight', 'integer greater than zero', options.tileHeight);\n      }\n    } // pyramid\n\n\n    if (is.defined(options.pyramid)) {\n      this._setBooleanOption('tiffPyramid', options.pyramid);\n    } // resolution\n\n\n    if (is.defined(options.xres)) {\n      if (is.number(options.xres) && options.xres > 0) {\n        this.options.tiffXres = options.xres;\n      } else {\n        throw is.invalidParameterError('xres', 'number greater than zero', options.xres);\n      }\n    }\n\n    if (is.defined(options.yres)) {\n      if (is.number(options.yres) && options.yres > 0) {\n        this.options.tiffYres = options.yres;\n      } else {\n        throw is.invalidParameterError('yres', 'number greater than zero', options.yres);\n      }\n    } // compression\n\n\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['lzw', 'deflate', 'jpeg', 'ccittfax4', 'none'])) {\n        this.options.tiffCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: lzw, deflate, jpeg, ccittfax4, none', options.compression);\n      }\n    } // predictor\n\n\n    if (is.defined(options.predictor)) {\n      if (is.string(options.predictor) && is.inArray(options.predictor, ['none', 'horizontal', 'float'])) {\n        this.options.tiffPredictor = options.predictor;\n      } else {\n        throw is.invalidParameterError('predictor', 'one of: none, horizontal, float', options.predictor);\n      }\n    }\n  }\n\n  return this._updateFormatOut('tiff', options);\n}\n/**\n * Use these AVIF options for output image.\n *\n * Whilst it is possible to create AVIF images smaller than 16x16 pixels,\n * most web browsers do not display these properly.\n *\n * AVIF image sequences are not supported.\n *\n * @since 0.27.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {number} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 9 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:4:4'] - set to '4:2:0' to use chroma subsampling\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction avif(options) {\n  return this.heif({ ...options,\n    compression: 'av1'\n  });\n}\n/**\n * Use these HEIF options for output image.\n *\n * Support for patent-encumbered HEIC images requires the use of a\n * globally-installed libvips compiled with support for libheif, libde265 and x265.\n *\n * @since 0.23.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {string} [options.compression='av1'] - compression format: av1, hevc\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {number} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 9 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:4:4'] - set to '4:2:0' to use chroma subsampling\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n\n\nfunction heif(options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.heifQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n\n    if (is.defined(options.lossless)) {\n      if (is.bool(options.lossless)) {\n        this.options.heifLossless = options.lossless;\n      } else {\n        throw is.invalidParameterError('lossless', 'boolean', options.lossless);\n      }\n    }\n\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['av1', 'hevc'])) {\n        this.options.heifCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: av1, hevc', options.compression);\n      }\n    }\n\n    if (is.defined(options.speed)) {\n      if (is.integer(options.speed) && is.inRange(options.speed, 0, 9)) {\n        this.options.heifSpeed = options.speed;\n      } else {\n        throw is.invalidParameterError('speed', 'integer between 0 and 9', options.speed);\n      }\n    }\n\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.heifChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n  }\n\n  return this._updateFormatOut('heif', options);\n}\n/**\n * Force output to be raw, uncompressed pixel data.\n * Pixel ordering is left-to-right, top-to-bottom, without padding.\n * Channel ordering will be RGB or RGBA for non-greyscale colourspaces.\n *\n * @example\n * // Extract raw, unsigned 8-bit RGB pixel data from JPEG input\n * const { data, info } = await sharp('input.jpg')\n *   .raw()\n *   .toBuffer({ resolveWithObject: true });\n *\n * @example\n * // Extract alpha channel as raw, unsigned 16-bit pixel data from PNG input\n * const data = await sharp('input.png')\n *   .ensureAlpha()\n *   .extractChannel(3)\n *   .toColourspace('b-w')\n *   .raw({ depth: 'ushort' })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {string} [options.depth='uchar'] - bit depth, one of: char, uchar (default), short, ushort, int, uint, float, complex, double, dpcomplex\n * @throws {Error} Invalid options\n */\n\n\nfunction raw(options) {\n  if (is.object(options)) {\n    if (is.defined(options.depth)) {\n      if (is.string(options.depth) && is.inArray(options.depth, ['char', 'uchar', 'short', 'ushort', 'int', 'uint', 'float', 'complex', 'double', 'dpcomplex'])) {\n        this.options.rawDepth = options.depth;\n      } else {\n        throw is.invalidParameterError('depth', 'one of: char, uchar, short, ushort, int, uint, float, complex, double, dpcomplex', options.depth);\n      }\n    }\n  }\n\n  return this._updateFormatOut('raw');\n}\n/**\n * Use tile-based deep zoom (image pyramid) output.\n * Set the format and options for tile images via the `toFormat`, `jpeg`, `png` or `webp` functions.\n * Use a `.zip` or `.szi` file extension with `toFile` to write to a compressed archive file format.\n *\n * Warning: multiple sharp instances concurrently producing tile output can expose a possible race condition in some versions of libgsf.\n *\n * @example\n *  sharp('input.tiff')\n *   .png()\n *   .tile({\n *     size: 512\n *   })\n *   .toFile('output.dz', function(err, info) {\n *     // output.dzi is the Deep Zoom XML definition\n *     // output_files contains 512x512 tiles grouped by zoom level\n *   });\n *\n * @param {Object} [options]\n * @param {number} [options.size=256] tile size in pixels, a value between 1 and 8192.\n * @param {number} [options.overlap=0] tile overlap in pixels, a value between 0 and 8192.\n * @param {number} [options.angle=0] tile angle of rotation, must be a multiple of 90.\n * @param {string|Object} [options.background={r: 255, g: 255, b: 255, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to white without transparency.\n * @param {string} [options.depth] how deep to make the pyramid, possible values are `onepixel`, `onetile` or `one`, default based on layout.\n * @param {number} [options.skipBlanks=-1] threshold to skip tile generation, a value 0 - 255 for 8-bit images or 0 - 65535 for 16-bit images\n * @param {string} [options.container='fs'] tile container, with value `fs` (filesystem) or `zip` (compressed file).\n * @param {string} [options.layout='dz'] filesystem layout, possible values are `dz`, `iiif`, `zoomify` or `google`.\n * @param {boolean} [options.centre=false] centre image in tile.\n * @param {boolean} [options.center=false] alternative spelling of centre.\n * @param {string} [options.id='https://example.com/iiif'] when `layout` is `iiif`, sets the `@id` attribute of `info.json`\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction tile(options) {\n  if (is.object(options)) {\n    // Size of square tiles, in pixels\n    if (is.defined(options.size)) {\n      if (is.integer(options.size) && is.inRange(options.size, 1, 8192)) {\n        this.options.tileSize = options.size;\n      } else {\n        throw is.invalidParameterError('size', 'integer between 1 and 8192', options.size);\n      }\n    } // Overlap of tiles, in pixels\n\n\n    if (is.defined(options.overlap)) {\n      if (is.integer(options.overlap) && is.inRange(options.overlap, 0, 8192)) {\n        if (options.overlap > this.options.tileSize) {\n          throw is.invalidParameterError('overlap', `<= size (${this.options.tileSize})`, options.overlap);\n        }\n\n        this.options.tileOverlap = options.overlap;\n      } else {\n        throw is.invalidParameterError('overlap', 'integer between 0 and 8192', options.overlap);\n      }\n    } // Container\n\n\n    if (is.defined(options.container)) {\n      if (is.string(options.container) && is.inArray(options.container, ['fs', 'zip'])) {\n        this.options.tileContainer = options.container;\n      } else {\n        throw is.invalidParameterError('container', 'one of: fs, zip', options.container);\n      }\n    } // Layout\n\n\n    if (is.defined(options.layout)) {\n      if (is.string(options.layout) && is.inArray(options.layout, ['dz', 'google', 'iiif', 'zoomify'])) {\n        this.options.tileLayout = options.layout;\n      } else {\n        throw is.invalidParameterError('layout', 'one of: dz, google, iiif, zoomify', options.layout);\n      }\n    } // Angle of rotation,\n\n\n    if (is.defined(options.angle)) {\n      if (is.integer(options.angle) && !(options.angle % 90)) {\n        this.options.tileAngle = options.angle;\n      } else {\n        throw is.invalidParameterError('angle', 'positive/negative multiple of 90', options.angle);\n      }\n    } // Background colour\n\n\n    this._setBackgroundColourOption('tileBackground', options.background); // Depth of tiles\n\n\n    if (is.defined(options.depth)) {\n      if (is.string(options.depth) && is.inArray(options.depth, ['onepixel', 'onetile', 'one'])) {\n        this.options.tileDepth = options.depth;\n      } else {\n        throw is.invalidParameterError('depth', 'one of: onepixel, onetile, one', options.depth);\n      }\n    } // Threshold to skip blank tiles\n\n\n    if (is.defined(options.skipBlanks)) {\n      if (is.integer(options.skipBlanks) && is.inRange(options.skipBlanks, -1, 65535)) {\n        this.options.tileSkipBlanks = options.skipBlanks;\n      } else {\n        throw is.invalidParameterError('skipBlanks', 'integer between -1 and 255/65535', options.skipBlanks);\n      }\n    } else if (is.defined(options.layout) && options.layout === 'google') {\n      this.options.tileSkipBlanks = 5;\n    } // Center image in tile\n\n\n    const centre = is.bool(options.center) ? options.center : options.centre;\n\n    if (is.defined(centre)) {\n      this._setBooleanOption('tileCentre', centre);\n    } // @id attribute for IIIF layout\n\n\n    if (is.defined(options.id)) {\n      if (is.string(options.id)) {\n        this.options.tileId = options.id;\n      } else {\n        throw is.invalidParameterError('id', 'string', options.id);\n      }\n    }\n  } // Format\n\n\n  if (is.inArray(this.options.formatOut, ['jpeg', 'png', 'webp'])) {\n    this.options.tileFormat = this.options.formatOut;\n  } else if (this.options.formatOut !== 'input') {\n    throw is.invalidParameterError('format', 'one of: jpeg, png, webp', this.options.formatOut);\n  }\n\n  return this._updateFormatOut('dz');\n}\n/**\n * Set a timeout for processing, in seconds.\n * Use a value of zero to continue processing indefinitely, the default behaviour.\n *\n * The clock starts when libvips opens an input image for processing.\n * Time spent waiting for a libuv thread to become available is not included.\n *\n * @since 0.29.2\n *\n * @param {Object} options\n * @param {number} options.seconds - Number of seconds after which processing will be stopped\n * @returns {Sharp}\n */\n\n\nfunction timeout(options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'object', options);\n  }\n\n  if (is.integer(options.seconds) && is.inRange(options.seconds, 0, 3600)) {\n    this.options.timeoutSeconds = options.seconds;\n  } else {\n    throw is.invalidParameterError('seconds', 'integer between 0 and 3600', options.seconds);\n  }\n\n  return this;\n}\n/**\n * Update the output format unless options.force is false,\n * in which case revert to input format.\n * @private\n * @param {string} formatOut\n * @param {Object} [options]\n * @param {boolean} [options.force=true] - force output format, otherwise attempt to use input format\n * @returns {Sharp}\n */\n\n\nfunction _updateFormatOut(formatOut, options) {\n  if (!(is.object(options) && options.force === false)) {\n    this.options.formatOut = formatOut;\n  }\n\n  return this;\n}\n/**\n * Update a boolean attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {boolean} val\n * @throws {Error} Invalid key\n */\n\n\nfunction _setBooleanOption(key, val) {\n  if (is.bool(val)) {\n    this.options[key] = val;\n  } else {\n    throw is.invalidParameterError(key, 'boolean', val);\n  }\n}\n/**\n * Called by a WriteableStream to notify us it is ready for data.\n * @private\n */\n\n\nfunction _read() {\n  /* istanbul ignore else */\n  if (!this.options.streamOut) {\n    this.options.streamOut = true;\n\n    this._pipeline();\n  }\n}\n/**\n * Invoke the C++ image processing pipeline\n * Supports callback, stream and promise variants\n * @private\n */\n\n\nfunction _pipeline(callback) {\n  if (typeof callback === 'function') {\n    // output=file/buffer\n    if (this._isStreamInput()) {\n      // output=file/buffer, input=stream\n      this.on('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.pipeline(this.options, callback);\n      });\n    } else {\n      // output=file/buffer, input=file/buffer\n      sharp.pipeline(this.options, callback);\n    }\n\n    return this;\n  } else if (this.options.streamOut) {\n    // output=stream\n    if (this._isStreamInput()) {\n      // output=stream, input=stream\n      this.once('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            this.emit('error', err);\n          } else {\n            this.emit('info', info);\n            this.push(data);\n          }\n\n          this.push(null);\n        });\n      });\n\n      if (this.streamInFinished) {\n        this.emit('finish');\n      }\n    } else {\n      // output=stream, input=file/buffer\n      sharp.pipeline(this.options, (err, data, info) => {\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('info', info);\n          this.push(data);\n        }\n\n        this.push(null);\n      });\n    }\n\n    return this;\n  } else {\n    // output=promise\n    if (this._isStreamInput()) {\n      // output=promise, input=stream\n      return new Promise((resolve, reject) => {\n        this.once('finish', () => {\n          this._flattenBufferIn();\n\n          sharp.pipeline(this.options, (err, data, info) => {\n            if (err) {\n              reject(err);\n            } else {\n              if (this.options.resolveWithObject) {\n                resolve({\n                  data,\n                  info\n                });\n              } else {\n                resolve(data);\n              }\n            }\n          });\n        });\n      });\n    } else {\n      // output=promise, input=file/buffer\n      return new Promise((resolve, reject) => {\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            reject(err);\n          } else {\n            if (this.options.resolveWithObject) {\n              resolve({\n                data: data,\n                info: info\n              });\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n    }\n  }\n}\n/**\n * Decorate the Sharp prototype with output-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    toFile,\n    toBuffer,\n    withMetadata,\n    toFormat,\n    jpeg,\n    jp2,\n    png,\n    webp,\n    tiff,\n    avif,\n    heif,\n    gif,\n    raw,\n    tile,\n    timeout,\n    // Private\n    _updateFormatOut,\n    _setBooleanOption,\n    _read,\n    _pipeline\n  });\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/node_modules/sharp/lib/output.js"],"names":["path","require","is","sharp","formats","Map","errMagickSave","Error","errJp2Save","toFile","fileOut","callback","err","string","options","input","file","resolve","formatOut","toLowerCase","endsWith","constructor","format","magick","output","fn","Promise","reject","_pipeline","toBuffer","object","_setBooleanOption","resolveWithObject","withMetadata","bool","defined","orientation","integer","inRange","withMetadataOrientation","invalidParameterError","density","number","withMetadataDensity","icc","withMetadataIcc","exif","ifd","entries","Object","k","v","withMetadataStrs","toFormat","actualFormat","get","id","keys","join","jpeg","quality","jpegQuality","progressive","chromaSubsampling","inArray","jpegChromaSubsampling","optimiseCoding","optimizeCoding","mozjpeg","jpegTrellisQuantisation","jpegOvershootDeringing","jpegOptimiseScans","jpegProgressive","jpegQuantisationTable","trellisQuantisation","trellisQuantization","overshootDeringing","optimiseScans","optimizeScans","quantisationTable","quantizationTable","_updateFormatOut","png","compressionLevel","pngCompressionLevel","adaptiveFiltering","palette","colours","colors","dither","pngPalette","pngQuality","pngBitdepth","Math","clz32","ceil","log2","pngDither","webp","webpQuality","alphaQuality","webpAlphaQuality","lossless","nearLossless","smartSubsample","reductionEffort","webpReductionEffort","trySetAnimationOptions","gif","buffer","jp2","jp2k","jp2Quality","jp2Lossless","tileWidth","jp2TileWidth","tileHeight","jp2TileHeight","heifChromaSubsampling","source","target","pageHeight","loop","delay","Array","isArray","every","tiff","tiffQuality","bitdepth","tiffBitdepth","tile","tiffTileWidth","tiffTileHeight","pyramid","xres","tiffXres","yres","tiffYres","compression","tiffCompression","predictor","tiffPredictor","avif","heif","heifQuality","heifLossless","heifCompression","speed","heifSpeed","raw","depth","rawDepth","size","tileSize","overlap","tileOverlap","container","tileContainer","layout","tileLayout","angle","tileAngle","_setBackgroundColourOption","background","tileDepth","skipBlanks","tileSkipBlanks","centre","center","tileId","tileFormat","timeout","plainObject","seconds","timeoutSeconds","force","key","val","_read","streamOut","_isStreamInput","on","_flattenBufferIn","pipeline","once","data","info","emit","push","streamInFinished","module","exports","Sharp","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst is = require('./is');\nconst sharp = require('./sharp');\n\nconst formats = new Map([\n  ['heic', 'heif'],\n  ['heif', 'heif'],\n  ['avif', 'avif'],\n  ['jpeg', 'jpeg'],\n  ['jpg', 'jpeg'],\n  ['png', 'png'],\n  ['raw', 'raw'],\n  ['tiff', 'tiff'],\n  ['tif', 'tiff'],\n  ['webp', 'webp'],\n  ['gif', 'gif'],\n  ['jp2', 'jp2'],\n  ['jpx', 'jp2'],\n  ['j2k', 'jp2'],\n  ['j2c', 'jp2']\n]);\n\nconst errMagickSave = new Error('GIF output requires libvips with support for ImageMagick');\nconst errJp2Save = new Error('JP2 output requires libvips with support for OpenJPEG');\n\n/**\n * Write output image data to a file.\n *\n * If an explicit output format is not selected, it will be inferred from the extension,\n * with JPEG, PNG, WebP, AVIF, TIFF, DZI, and libvips' V format supported.\n * Note that raw pixel data is only supported for buffer output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * The caller is responsible for ensuring directory structures and permissions exist.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toFile('output.png', (err, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toFile('output.png')\n *   .then(info => { ... })\n *   .catch(err => { ... });\n *\n * @param {string} fileOut - the path to write the image data to.\n * @param {Function} [callback] - called on completion with two arguments `(err, info)`.\n * `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n * @returns {Promise<Object>} - when no callback is provided\n * @throws {Error} Invalid parameters\n */\nfunction toFile (fileOut, callback) {\n  let err;\n  if (!is.string(fileOut)) {\n    err = new Error('Missing output file path');\n  } else if (is.string(this.options.input.file) && path.resolve(this.options.input.file) === path.resolve(fileOut)) {\n    err = new Error('Cannot use same file for input and output');\n  } else if (this.options.formatOut === 'input' && fileOut.toLowerCase().endsWith('.gif') && !this.constructor.format.magick.output.file) {\n    err = errMagickSave;\n  }\n  if (err) {\n    if (is.fn(callback)) {\n      callback(err);\n    } else {\n      return Promise.reject(err);\n    }\n  } else {\n    this.options.fileOut = fileOut;\n    return this._pipeline(callback);\n  }\n  return this;\n}\n\n/**\n * Write output to a Buffer.\n * JPEG, PNG, WebP, AVIF, TIFF and raw pixel data output are supported.\n *\n * If no explicit format is set, the output format will match the input image, except GIF and SVG input which become PNG output.\n *\n * By default all metadata will be removed, which includes EXIF-based orientation.\n * See {@link withMetadata} for control over this.\n *\n * `callback`, if present, gets three arguments `(err, data, info)` where:\n * - `err` is an error, if any.\n * - `data` is the output image data.\n * - `info` contains the output image `format`, `size` (bytes), `width`, `height`,\n * `channels` and `premultiplied` (indicating if premultiplication was used).\n * When using a crop strategy also contains `cropOffsetLeft` and `cropOffsetTop`.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * @example\n * sharp(input)\n *   .toBuffer((err, data, info) => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer()\n *   .then(data => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * sharp(input)\n *   .toBuffer({ resolveWithObject: true })\n *   .then(({ data, info }) => { ... })\n *   .catch(err => { ... });\n *\n * @example\n * const { data, info } = await sharp('my-image.jpg')\n *   // output the raw pixels\n *   .raw()\n *   .toBuffer({ resolveWithObject: true });\n *\n * // create a more type safe way to work with the raw pixel data\n * // this will not copy the data, instead it will change `data`s underlying ArrayBuffer\n * // so `data` and `pixelArray` point to the same memory location\n * const pixelArray = new Uint8ClampedArray(data.buffer);\n *\n * // When you are done changing the pixelArray, sharp takes the `pixelArray` as an input\n * const { width, height, channels } = info;\n * await sharp(pixelArray, { raw: { width, height, channels } })\n *   .toFile('my-changed-image.jpg');\n *\n * @param {Object} [options]\n * @param {boolean} [options.resolveWithObject] Resolve the Promise with an Object containing `data` and `info` properties instead of resolving only with `data`.\n * @param {Function} [callback]\n * @returns {Promise<Buffer>} - when no callback is provided\n */\nfunction toBuffer (options, callback) {\n  if (is.object(options)) {\n    this._setBooleanOption('resolveWithObject', options.resolveWithObject);\n  } else if (this.options.resolveWithObject) {\n    this.options.resolveWithObject = false;\n  }\n  return this._pipeline(is.fn(options) ? options : callback);\n}\n\n/**\n * Include all metadata (EXIF, XMP, IPTC) from the input image in the output image.\n * This will also convert to and add a web-friendly sRGB ICC profile unless a custom\n * output profile is provided.\n *\n * The default behaviour, when `withMetadata` is not used, is to convert to the device-independent\n * sRGB colour space and strip all metadata, including the removal of any ICC profile.\n *\n * @example\n * sharp('input.jpg')\n *   .withMetadata()\n *   .toFile('output-with-metadata.jpg')\n *   .then(info => { ... });\n *\n * @example\n * // Set \"IFD0-Copyright\" in output EXIF metadata\n * const data = await sharp(input)\n *   .withMetadata({\n *     exif: {\n *       IFD0: {\n *         Copyright: 'Wernham Hogg'\n *       }\n *     }\n *   })\n *   .toBuffer();\n *\n *  * @example\n * // Set output metadata to 96 DPI\n * const data = await sharp(input)\n *   .withMetadata({ density: 96 })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.orientation] value between 1 and 8, used to update the EXIF `Orientation` tag.\n * @param {string} [options.icc] filesystem path to output ICC profile, defaults to sRGB.\n * @param {Object<Object>} [options.exif={}] Object keyed by IFD0, IFD1 etc. of key/value string pairs to write as EXIF data.\n * @param {number} [options.density] Number of pixels per inch (DPI).\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction withMetadata (options) {\n  this.options.withMetadata = is.bool(options) ? options : true;\n  if (is.object(options)) {\n    if (is.defined(options.orientation)) {\n      if (is.integer(options.orientation) && is.inRange(options.orientation, 1, 8)) {\n        this.options.withMetadataOrientation = options.orientation;\n      } else {\n        throw is.invalidParameterError('orientation', 'integer between 1 and 8', options.orientation);\n      }\n    }\n    if (is.defined(options.density)) {\n      if (is.number(options.density) && options.density > 0) {\n        this.options.withMetadataDensity = options.density;\n      } else {\n        throw is.invalidParameterError('density', 'positive number', options.density);\n      }\n    }\n    if (is.defined(options.icc)) {\n      if (is.string(options.icc)) {\n        this.options.withMetadataIcc = options.icc;\n      } else {\n        throw is.invalidParameterError('icc', 'string filesystem path to ICC profile', options.icc);\n      }\n    }\n    if (is.defined(options.exif)) {\n      if (is.object(options.exif)) {\n        for (const [ifd, entries] of Object.entries(options.exif)) {\n          if (is.object(entries)) {\n            for (const [k, v] of Object.entries(entries)) {\n              if (is.string(v)) {\n                this.options.withMetadataStrs[`exif-${ifd.toLowerCase()}-${k}`] = v;\n              } else {\n                throw is.invalidParameterError(`exif.${ifd}.${k}`, 'string', v);\n              }\n            }\n          } else {\n            throw is.invalidParameterError(`exif.${ifd}`, 'object', entries);\n          }\n        }\n      } else {\n        throw is.invalidParameterError('exif', 'object', options.exif);\n      }\n    }\n  }\n  return this;\n}\n\n/**\n * Force output to a given format.\n *\n * @example\n * // Convert any input to PNG output\n * const data = await sharp(input)\n *   .toFormat('png')\n *   .toBuffer();\n *\n * @param {(string|Object)} format - as a string or an Object with an 'id' attribute\n * @param {Object} options - output options\n * @returns {Sharp}\n * @throws {Error} unsupported format or options\n */\nfunction toFormat (format, options) {\n  const actualFormat = formats.get((is.object(format) && is.string(format.id) ? format.id : format).toLowerCase());\n  if (!actualFormat) {\n    throw is.invalidParameterError('format', `one of: ${[...formats.keys()].join(', ')}`, format);\n  }\n  return this[actualFormat](options);\n}\n\n/**\n * Use these JPEG options for output image.\n *\n * @example\n * // Convert any input to very high quality JPEG output\n * const data = await sharp(input)\n *   .jpeg({\n *     quality: 100,\n *     chromaSubsampling: '4:4:4'\n *   })\n *   .toBuffer();\n *\n * @example\n * // Use mozjpeg to reduce output JPEG file size (slower)\n * const data = await sharp(input)\n *   .jpeg({ mozjpeg: true })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {string} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling otherwise defaults to '4:2:0' chroma subsampling\n * @param {boolean} [options.optimiseCoding=true] - optimise Huffman coding tables\n * @param {boolean} [options.optimizeCoding=true] - alternative spelling of optimiseCoding\n * @param {boolean} [options.mozjpeg=false] - use mozjpeg defaults, equivalent to `{ trellisQuantisation: true, overshootDeringing: true, optimiseScans: true, quantisationTable: 3 }`\n * @param {boolean} [options.trellisQuantisation=false] - apply trellis quantisation\n * @param {boolean} [options.overshootDeringing=false] - apply overshoot deringing\n * @param {boolean} [options.optimiseScans=false] - optimise progressive scans, forces progressive\n * @param {boolean} [options.optimizeScans=false] - alternative spelling of optimiseScans\n * @param {number} [options.quantisationTable=0] - quantization table to use, integer 0-8\n * @param {number} [options.quantizationTable=0] - alternative spelling of quantisationTable\n * @param {boolean} [options.force=true] - force JPEG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction jpeg (options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.jpegQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('jpegProgressive', options.progressive);\n    }\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.jpegChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n    const optimiseCoding = is.bool(options.optimizeCoding) ? options.optimizeCoding : options.optimiseCoding;\n    if (is.defined(optimiseCoding)) {\n      this._setBooleanOption('jpegOptimiseCoding', optimiseCoding);\n    }\n    if (is.defined(options.mozjpeg)) {\n      if (is.bool(options.mozjpeg)) {\n        if (options.mozjpeg) {\n          this.options.jpegTrellisQuantisation = true;\n          this.options.jpegOvershootDeringing = true;\n          this.options.jpegOptimiseScans = true;\n          this.options.jpegProgressive = true;\n          this.options.jpegQuantisationTable = 3;\n        }\n      } else {\n        throw is.invalidParameterError('mozjpeg', 'boolean', options.mozjpeg);\n      }\n    }\n    const trellisQuantisation = is.bool(options.trellisQuantization) ? options.trellisQuantization : options.trellisQuantisation;\n    if (is.defined(trellisQuantisation)) {\n      this._setBooleanOption('jpegTrellisQuantisation', trellisQuantisation);\n    }\n    if (is.defined(options.overshootDeringing)) {\n      this._setBooleanOption('jpegOvershootDeringing', options.overshootDeringing);\n    }\n    const optimiseScans = is.bool(options.optimizeScans) ? options.optimizeScans : options.optimiseScans;\n    if (is.defined(optimiseScans)) {\n      this._setBooleanOption('jpegOptimiseScans', optimiseScans);\n      if (optimiseScans) {\n        this.options.jpegProgressive = true;\n      }\n    }\n    const quantisationTable = is.number(options.quantizationTable) ? options.quantizationTable : options.quantisationTable;\n    if (is.defined(quantisationTable)) {\n      if (is.integer(quantisationTable) && is.inRange(quantisationTable, 0, 8)) {\n        this.options.jpegQuantisationTable = quantisationTable;\n      } else {\n        throw is.invalidParameterError('quantisationTable', 'integer between 0 and 8', quantisationTable);\n      }\n    }\n  }\n  return this._updateFormatOut('jpeg', options);\n}\n\n/**\n * Use these PNG options for output image.\n *\n * By default, PNG output is full colour at 8 or 16 bits per pixel.\n * Indexed PNG input at 1, 2 or 4 bits per pixel is converted to 8 bits per pixel.\n * Set `palette` to `true` for slower, indexed PNG output.\n *\n * @example\n * // Convert any input to full colour PNG output\n * const data = await sharp(input)\n *   .png()\n *   .toBuffer();\n *\n * @example\n * // Convert any input to indexed PNG output (slower)\n * const data = await sharp(input)\n *   .png({ palette: true })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {boolean} [options.progressive=false] - use progressive (interlace) scan\n * @param {number} [options.compressionLevel=6] - zlib compression level, 0 (fastest, largest) to 9 (slowest, smallest)\n * @param {boolean} [options.adaptiveFiltering=false] - use adaptive row filtering\n * @param {boolean} [options.palette=false] - quantise to a palette-based image with alpha transparency support\n * @param {number} [options.quality=100] - use the lowest number of colours needed to achieve given quality, sets `palette` to `true`\n * @param {number} [options.colours=256] - maximum number of palette entries, sets `palette` to `true`\n * @param {number} [options.colors=256] - alternative spelling of `options.colours`, sets `palette` to `true`\n * @param {number} [options.dither=1.0] - level of Floyd-Steinberg error diffusion, sets `palette` to `true`\n * @param {boolean} [options.force=true] - force PNG output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction png (options) {\n  if (is.object(options)) {\n    if (is.defined(options.progressive)) {\n      this._setBooleanOption('pngProgressive', options.progressive);\n    }\n    if (is.defined(options.compressionLevel)) {\n      if (is.integer(options.compressionLevel) && is.inRange(options.compressionLevel, 0, 9)) {\n        this.options.pngCompressionLevel = options.compressionLevel;\n      } else {\n        throw is.invalidParameterError('compressionLevel', 'integer between 0 and 9', options.compressionLevel);\n      }\n    }\n    if (is.defined(options.adaptiveFiltering)) {\n      this._setBooleanOption('pngAdaptiveFiltering', options.adaptiveFiltering);\n    }\n    if (is.defined(options.palette)) {\n      this._setBooleanOption('pngPalette', options.palette);\n    } else if (is.defined(options.quality) || is.defined(options.colours || options.colors) || is.defined(options.dither)) {\n      this._setBooleanOption('pngPalette', true);\n    }\n    if (this.options.pngPalette) {\n      if (is.defined(options.quality)) {\n        if (is.integer(options.quality) && is.inRange(options.quality, 0, 100)) {\n          this.options.pngQuality = options.quality;\n        } else {\n          throw is.invalidParameterError('quality', 'integer between 0 and 100', options.quality);\n        }\n      }\n      const colours = options.colours || options.colors;\n      if (is.defined(colours)) {\n        if (is.integer(colours) && is.inRange(colours, 2, 256)) {\n          this.options.pngBitdepth = 1 << 31 - Math.clz32(Math.ceil(Math.log2(colours)));\n        } else {\n          throw is.invalidParameterError('colours', 'integer between 2 and 256', colours);\n        }\n      }\n      if (is.defined(options.dither)) {\n        if (is.number(options.dither) && is.inRange(options.dither, 0, 1)) {\n          this.options.pngDither = options.dither;\n        } else {\n          throw is.invalidParameterError('dither', 'number between 0.0 and 1.0', options.dither);\n        }\n      }\n    }\n  }\n  return this._updateFormatOut('png', options);\n}\n\n/**\n * Use these WebP options for output image.\n *\n * @example\n * // Convert any input to lossless WebP output\n * const data = await sharp(input)\n *   .webp({ lossless: true })\n *   .toBuffer();\n *\n * @example\n * // Optimise the file size of an animated WebP\n * const outputWebp = await sharp(inputWebp, { animated: true })\n *   .webp({ reductionEffort: 6 })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {number} [options.alphaQuality=100] - quality of alpha layer, integer 0-100\n * @param {boolean} [options.lossless=false] - use lossless compression mode\n * @param {boolean} [options.nearLossless=false] - use near_lossless compression mode\n * @param {boolean} [options.smartSubsample=false] - use high quality chroma subsampling\n * @param {number} [options.reductionEffort=4] - level of CPU effort to reduce file size, integer 0-6\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force WebP output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction webp (options) {\n  if (is.object(options) && is.defined(options.quality)) {\n    if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n      this.options.webpQuality = options.quality;\n    } else {\n      throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n    }\n  }\n  if (is.object(options) && is.defined(options.alphaQuality)) {\n    if (is.integer(options.alphaQuality) && is.inRange(options.alphaQuality, 0, 100)) {\n      this.options.webpAlphaQuality = options.alphaQuality;\n    } else {\n      throw is.invalidParameterError('alphaQuality', 'integer between 0 and 100', options.alphaQuality);\n    }\n  }\n  if (is.object(options) && is.defined(options.lossless)) {\n    this._setBooleanOption('webpLossless', options.lossless);\n  }\n  if (is.object(options) && is.defined(options.nearLossless)) {\n    this._setBooleanOption('webpNearLossless', options.nearLossless);\n  }\n  if (is.object(options) && is.defined(options.smartSubsample)) {\n    this._setBooleanOption('webpSmartSubsample', options.smartSubsample);\n  }\n  if (is.object(options) && is.defined(options.reductionEffort)) {\n    if (is.integer(options.reductionEffort) && is.inRange(options.reductionEffort, 0, 6)) {\n      this.options.webpReductionEffort = options.reductionEffort;\n    } else {\n      throw is.invalidParameterError('reductionEffort', 'integer between 0 and 6', options.reductionEffort);\n    }\n  }\n\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('webp', options);\n}\n\n/**\n * Use these GIF options for output image.\n *\n * Requires libvips compiled with support for ImageMagick or GraphicsMagick.\n * The prebuilt binaries do not include this - see\n * {@link https://sharp.pixelplumbing.com/install#custom-libvips installing a custom libvips}.\n *\n * @param {Object} [options] - output options\n * @param {number} [options.pageHeight] - page height for animated output\n * @param {number} [options.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [options.delay] - list of delays between animation frames (in milliseconds)\n * @param {boolean} [options.force=true] - force GIF output, otherwise attempt to use input format\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n/* istanbul ignore next */\nfunction gif (options) {\n  if (!this.constructor.format.magick.output.buffer) {\n    throw errMagickSave;\n  }\n  trySetAnimationOptions(options, this.options);\n  return this._updateFormatOut('gif', options);\n}\n\n/**\n * Use these JP2 options for output image.\n *\n * Requires libvips compiled with support for OpenJPEG.\n * The prebuilt binaries do not include this - see\n * {@link https://sharp.pixelplumbing.com/install#custom-libvips installing a custom libvips}.\n *\n * @example\n * // Convert any input to lossless JP2 output\n * const data = await sharp(input)\n *   .jp2({ lossless: true })\n *   .toBuffer();\n *\n * @example\n * // Convert any input to very high quality JP2 output\n * const data = await sharp(input)\n *   .jp2({\n *     quality: 100,\n *     chromaSubsampling: '4:4:4'\n *   })\n *   .toBuffer();\n *\n * @since 0.29.1\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.lossless=false] - use lossless compression mode\n * @param {number} [options.tileWidth=512] - horizontal tile size\n * @param {number} [options.tileHeight=512] - vertical tile size\n * @param {string} [options.chromaSubsampling='4:4:4'] - set to '4:2:0' to use chroma subsampling\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\n/* istanbul ignore next */\nfunction jp2 (options) {\n  if (!this.constructor.format.jp2k.output.buffer) {\n    throw errJp2Save;\n  }\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.jp2Quality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.lossless)) {\n      if (is.bool(options.lossless)) {\n        this.options.jp2Lossless = options.lossless;\n      } else {\n        throw is.invalidParameterError('lossless', 'boolean', options.lossless);\n      }\n    }\n    if (is.defined(options.tileWidth)) {\n      if (is.integer(options.tileWidth) && is.inRange(options.tileWidth, 1, 32768)) {\n        this.options.jp2TileWidth = options.tileWidth;\n      } else {\n        throw is.invalidParameterError('tileWidth', 'integer between 1 and 32768', options.tileWidth);\n      }\n    }\n    if (is.defined(options.tileHeight)) {\n      if (is.integer(options.tileHeight) && is.inRange(options.tileHeight, 1, 32768)) {\n        this.options.jp2TileHeight = options.tileHeight;\n      } else {\n        throw is.invalidParameterError('tileHeight', 'integer between 1 and 32768', options.tileHeight);\n      }\n    }\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.heifChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n  }\n  return this._updateFormatOut('jp2', options);\n}\n\n/**\n * Set animation options if available.\n * @private\n *\n * @param {Object} [source] - output options\n * @param {number} [source.pageHeight] - page height for animated output\n * @param {number} [source.loop=0] - number of animation iterations, use 0 for infinite animation\n * @param {number[]} [source.delay] - list of delays between animation frames (in milliseconds)\n * @param {Object} [target] - target object for valid options\n * @throws {Error} Invalid options\n */\nfunction trySetAnimationOptions (source, target) {\n  if (is.object(source) && is.defined(source.pageHeight)) {\n    if (is.integer(source.pageHeight) && source.pageHeight > 0) {\n      target.pageHeight = source.pageHeight;\n    } else {\n      throw is.invalidParameterError('pageHeight', 'integer larger than 0', source.pageHeight);\n    }\n  }\n  if (is.object(source) && is.defined(source.loop)) {\n    if (is.integer(source.loop) && is.inRange(source.loop, 0, 65535)) {\n      target.loop = source.loop;\n    } else {\n      throw is.invalidParameterError('loop', 'integer between 0 and 65535', source.loop);\n    }\n  }\n  if (is.object(source) && is.defined(source.delay)) {\n    if (\n      Array.isArray(source.delay) &&\n      source.delay.every(is.integer) &&\n      source.delay.every(v => is.inRange(v, 0, 65535))) {\n      target.delay = source.delay;\n    } else {\n      throw is.invalidParameterError('delay', 'array of integers between 0 and 65535', source.delay);\n    }\n  }\n}\n\n/**\n * Use these TIFF options for output image.\n *\n * The `density` can be set in pixels/inch via {@link withMetadata} instead of providing `xres` and `yres` in pixels/mm.\n *\n * @example\n * // Convert SVG input to LZW-compressed, 1 bit per pixel TIFF output\n * sharp('input.svg')\n *   .tiff({\n *     compression: 'lzw',\n *     bitdepth: 1\n *   })\n *   .toFile('1-bpp-output.tiff')\n *   .then(info => { ... });\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=80] - quality, integer 1-100\n * @param {boolean} [options.force=true] - force TIFF output, otherwise attempt to use input format\n * @param {string} [options.compression='jpeg'] - compression options: lzw, deflate, jpeg, ccittfax4\n * @param {string} [options.predictor='horizontal'] - compression predictor options: none, horizontal, float\n * @param {boolean} [options.pyramid=false] - write an image pyramid\n * @param {boolean} [options.tile=false] - write a tiled tiff\n * @param {number} [options.tileWidth=256] - horizontal tile size\n * @param {number} [options.tileHeight=256] - vertical tile size\n * @param {number} [options.xres=1.0] - horizontal resolution in pixels/mm\n * @param {number} [options.yres=1.0] - vertical resolution in pixels/mm\n * @param {number} [options.bitdepth=8] - reduce bitdepth to 1, 2 or 4 bit\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction tiff (options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.tiffQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.bitdepth)) {\n      if (is.integer(options.bitdepth) && is.inArray(options.bitdepth, [1, 2, 4, 8])) {\n        this.options.tiffBitdepth = options.bitdepth;\n      } else {\n        throw is.invalidParameterError('bitdepth', '1, 2, 4 or 8', options.bitdepth);\n      }\n    }\n    // tiling\n    if (is.defined(options.tile)) {\n      this._setBooleanOption('tiffTile', options.tile);\n    }\n    if (is.defined(options.tileWidth)) {\n      if (is.integer(options.tileWidth) && options.tileWidth > 0) {\n        this.options.tiffTileWidth = options.tileWidth;\n      } else {\n        throw is.invalidParameterError('tileWidth', 'integer greater than zero', options.tileWidth);\n      }\n    }\n    if (is.defined(options.tileHeight)) {\n      if (is.integer(options.tileHeight) && options.tileHeight > 0) {\n        this.options.tiffTileHeight = options.tileHeight;\n      } else {\n        throw is.invalidParameterError('tileHeight', 'integer greater than zero', options.tileHeight);\n      }\n    }\n    // pyramid\n    if (is.defined(options.pyramid)) {\n      this._setBooleanOption('tiffPyramid', options.pyramid);\n    }\n    // resolution\n    if (is.defined(options.xres)) {\n      if (is.number(options.xres) && options.xres > 0) {\n        this.options.tiffXres = options.xres;\n      } else {\n        throw is.invalidParameterError('xres', 'number greater than zero', options.xres);\n      }\n    }\n    if (is.defined(options.yres)) {\n      if (is.number(options.yres) && options.yres > 0) {\n        this.options.tiffYres = options.yres;\n      } else {\n        throw is.invalidParameterError('yres', 'number greater than zero', options.yres);\n      }\n    }\n    // compression\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['lzw', 'deflate', 'jpeg', 'ccittfax4', 'none'])) {\n        this.options.tiffCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: lzw, deflate, jpeg, ccittfax4, none', options.compression);\n      }\n    }\n    // predictor\n    if (is.defined(options.predictor)) {\n      if (is.string(options.predictor) && is.inArray(options.predictor, ['none', 'horizontal', 'float'])) {\n        this.options.tiffPredictor = options.predictor;\n      } else {\n        throw is.invalidParameterError('predictor', 'one of: none, horizontal, float', options.predictor);\n      }\n    }\n  }\n  return this._updateFormatOut('tiff', options);\n}\n\n/**\n * Use these AVIF options for output image.\n *\n * Whilst it is possible to create AVIF images smaller than 16x16 pixels,\n * most web browsers do not display these properly.\n *\n * AVIF image sequences are not supported.\n *\n * @since 0.27.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {number} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 9 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:4:4'] - set to '4:2:0' to use chroma subsampling\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction avif (options) {\n  return this.heif({ ...options, compression: 'av1' });\n}\n\n/**\n * Use these HEIF options for output image.\n *\n * Support for patent-encumbered HEIC images requires the use of a\n * globally-installed libvips compiled with support for libheif, libde265 and x265.\n *\n * @since 0.23.0\n *\n * @param {Object} [options] - output options\n * @param {number} [options.quality=50] - quality, integer 1-100\n * @param {string} [options.compression='av1'] - compression format: av1, hevc\n * @param {boolean} [options.lossless=false] - use lossless compression\n * @param {number} [options.speed=5] - CPU effort vs file size, 0 (slowest/smallest) to 9 (fastest/largest)\n * @param {string} [options.chromaSubsampling='4:4:4'] - set to '4:2:0' to use chroma subsampling\n * @returns {Sharp}\n * @throws {Error} Invalid options\n */\nfunction heif (options) {\n  if (is.object(options)) {\n    if (is.defined(options.quality)) {\n      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {\n        this.options.heifQuality = options.quality;\n      } else {\n        throw is.invalidParameterError('quality', 'integer between 1 and 100', options.quality);\n      }\n    }\n    if (is.defined(options.lossless)) {\n      if (is.bool(options.lossless)) {\n        this.options.heifLossless = options.lossless;\n      } else {\n        throw is.invalidParameterError('lossless', 'boolean', options.lossless);\n      }\n    }\n    if (is.defined(options.compression)) {\n      if (is.string(options.compression) && is.inArray(options.compression, ['av1', 'hevc'])) {\n        this.options.heifCompression = options.compression;\n      } else {\n        throw is.invalidParameterError('compression', 'one of: av1, hevc', options.compression);\n      }\n    }\n    if (is.defined(options.speed)) {\n      if (is.integer(options.speed) && is.inRange(options.speed, 0, 9)) {\n        this.options.heifSpeed = options.speed;\n      } else {\n        throw is.invalidParameterError('speed', 'integer between 0 and 9', options.speed);\n      }\n    }\n    if (is.defined(options.chromaSubsampling)) {\n      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {\n        this.options.heifChromaSubsampling = options.chromaSubsampling;\n      } else {\n        throw is.invalidParameterError('chromaSubsampling', 'one of: 4:2:0, 4:4:4', options.chromaSubsampling);\n      }\n    }\n  }\n  return this._updateFormatOut('heif', options);\n}\n\n/**\n * Force output to be raw, uncompressed pixel data.\n * Pixel ordering is left-to-right, top-to-bottom, without padding.\n * Channel ordering will be RGB or RGBA for non-greyscale colourspaces.\n *\n * @example\n * // Extract raw, unsigned 8-bit RGB pixel data from JPEG input\n * const { data, info } = await sharp('input.jpg')\n *   .raw()\n *   .toBuffer({ resolveWithObject: true });\n *\n * @example\n * // Extract alpha channel as raw, unsigned 16-bit pixel data from PNG input\n * const data = await sharp('input.png')\n *   .ensureAlpha()\n *   .extractChannel(3)\n *   .toColourspace('b-w')\n *   .raw({ depth: 'ushort' })\n *   .toBuffer();\n *\n * @param {Object} [options] - output options\n * @param {string} [options.depth='uchar'] - bit depth, one of: char, uchar (default), short, ushort, int, uint, float, complex, double, dpcomplex\n * @throws {Error} Invalid options\n */\nfunction raw (options) {\n  if (is.object(options)) {\n    if (is.defined(options.depth)) {\n      if (is.string(options.depth) && is.inArray(options.depth,\n        ['char', 'uchar', 'short', 'ushort', 'int', 'uint', 'float', 'complex', 'double', 'dpcomplex']\n      )) {\n        this.options.rawDepth = options.depth;\n      } else {\n        throw is.invalidParameterError('depth', 'one of: char, uchar, short, ushort, int, uint, float, complex, double, dpcomplex', options.depth);\n      }\n    }\n  }\n  return this._updateFormatOut('raw');\n}\n\n/**\n * Use tile-based deep zoom (image pyramid) output.\n * Set the format and options for tile images via the `toFormat`, `jpeg`, `png` or `webp` functions.\n * Use a `.zip` or `.szi` file extension with `toFile` to write to a compressed archive file format.\n *\n * Warning: multiple sharp instances concurrently producing tile output can expose a possible race condition in some versions of libgsf.\n *\n * @example\n *  sharp('input.tiff')\n *   .png()\n *   .tile({\n *     size: 512\n *   })\n *   .toFile('output.dz', function(err, info) {\n *     // output.dzi is the Deep Zoom XML definition\n *     // output_files contains 512x512 tiles grouped by zoom level\n *   });\n *\n * @param {Object} [options]\n * @param {number} [options.size=256] tile size in pixels, a value between 1 and 8192.\n * @param {number} [options.overlap=0] tile overlap in pixels, a value between 0 and 8192.\n * @param {number} [options.angle=0] tile angle of rotation, must be a multiple of 90.\n * @param {string|Object} [options.background={r: 255, g: 255, b: 255, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to white without transparency.\n * @param {string} [options.depth] how deep to make the pyramid, possible values are `onepixel`, `onetile` or `one`, default based on layout.\n * @param {number} [options.skipBlanks=-1] threshold to skip tile generation, a value 0 - 255 for 8-bit images or 0 - 65535 for 16-bit images\n * @param {string} [options.container='fs'] tile container, with value `fs` (filesystem) or `zip` (compressed file).\n * @param {string} [options.layout='dz'] filesystem layout, possible values are `dz`, `iiif`, `zoomify` or `google`.\n * @param {boolean} [options.centre=false] centre image in tile.\n * @param {boolean} [options.center=false] alternative spelling of centre.\n * @param {string} [options.id='https://example.com/iiif'] when `layout` is `iiif`, sets the `@id` attribute of `info.json`\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction tile (options) {\n  if (is.object(options)) {\n    // Size of square tiles, in pixels\n    if (is.defined(options.size)) {\n      if (is.integer(options.size) && is.inRange(options.size, 1, 8192)) {\n        this.options.tileSize = options.size;\n      } else {\n        throw is.invalidParameterError('size', 'integer between 1 and 8192', options.size);\n      }\n    }\n    // Overlap of tiles, in pixels\n    if (is.defined(options.overlap)) {\n      if (is.integer(options.overlap) && is.inRange(options.overlap, 0, 8192)) {\n        if (options.overlap > this.options.tileSize) {\n          throw is.invalidParameterError('overlap', `<= size (${this.options.tileSize})`, options.overlap);\n        }\n        this.options.tileOverlap = options.overlap;\n      } else {\n        throw is.invalidParameterError('overlap', 'integer between 0 and 8192', options.overlap);\n      }\n    }\n    // Container\n    if (is.defined(options.container)) {\n      if (is.string(options.container) && is.inArray(options.container, ['fs', 'zip'])) {\n        this.options.tileContainer = options.container;\n      } else {\n        throw is.invalidParameterError('container', 'one of: fs, zip', options.container);\n      }\n    }\n    // Layout\n    if (is.defined(options.layout)) {\n      if (is.string(options.layout) && is.inArray(options.layout, ['dz', 'google', 'iiif', 'zoomify'])) {\n        this.options.tileLayout = options.layout;\n      } else {\n        throw is.invalidParameterError('layout', 'one of: dz, google, iiif, zoomify', options.layout);\n      }\n    }\n    // Angle of rotation,\n    if (is.defined(options.angle)) {\n      if (is.integer(options.angle) && !(options.angle % 90)) {\n        this.options.tileAngle = options.angle;\n      } else {\n        throw is.invalidParameterError('angle', 'positive/negative multiple of 90', options.angle);\n      }\n    }\n    // Background colour\n    this._setBackgroundColourOption('tileBackground', options.background);\n    // Depth of tiles\n    if (is.defined(options.depth)) {\n      if (is.string(options.depth) && is.inArray(options.depth, ['onepixel', 'onetile', 'one'])) {\n        this.options.tileDepth = options.depth;\n      } else {\n        throw is.invalidParameterError('depth', 'one of: onepixel, onetile, one', options.depth);\n      }\n    }\n    // Threshold to skip blank tiles\n    if (is.defined(options.skipBlanks)) {\n      if (is.integer(options.skipBlanks) && is.inRange(options.skipBlanks, -1, 65535)) {\n        this.options.tileSkipBlanks = options.skipBlanks;\n      } else {\n        throw is.invalidParameterError('skipBlanks', 'integer between -1 and 255/65535', options.skipBlanks);\n      }\n    } else if (is.defined(options.layout) && options.layout === 'google') {\n      this.options.tileSkipBlanks = 5;\n    }\n    // Center image in tile\n    const centre = is.bool(options.center) ? options.center : options.centre;\n    if (is.defined(centre)) {\n      this._setBooleanOption('tileCentre', centre);\n    }\n    // @id attribute for IIIF layout\n    if (is.defined(options.id)) {\n      if (is.string(options.id)) {\n        this.options.tileId = options.id;\n      } else {\n        throw is.invalidParameterError('id', 'string', options.id);\n      }\n    }\n  }\n  // Format\n  if (is.inArray(this.options.formatOut, ['jpeg', 'png', 'webp'])) {\n    this.options.tileFormat = this.options.formatOut;\n  } else if (this.options.formatOut !== 'input') {\n    throw is.invalidParameterError('format', 'one of: jpeg, png, webp', this.options.formatOut);\n  }\n  return this._updateFormatOut('dz');\n}\n\n/**\n * Set a timeout for processing, in seconds.\n * Use a value of zero to continue processing indefinitely, the default behaviour.\n *\n * The clock starts when libvips opens an input image for processing.\n * Time spent waiting for a libuv thread to become available is not included.\n *\n * @since 0.29.2\n *\n * @param {Object} options\n * @param {number} options.seconds - Number of seconds after which processing will be stopped\n * @returns {Sharp}\n */\nfunction timeout (options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'object', options);\n  }\n  if (is.integer(options.seconds) && is.inRange(options.seconds, 0, 3600)) {\n    this.options.timeoutSeconds = options.seconds;\n  } else {\n    throw is.invalidParameterError('seconds', 'integer between 0 and 3600', options.seconds);\n  }\n  return this;\n}\n\n/**\n * Update the output format unless options.force is false,\n * in which case revert to input format.\n * @private\n * @param {string} formatOut\n * @param {Object} [options]\n * @param {boolean} [options.force=true] - force output format, otherwise attempt to use input format\n * @returns {Sharp}\n */\nfunction _updateFormatOut (formatOut, options) {\n  if (!(is.object(options) && options.force === false)) {\n    this.options.formatOut = formatOut;\n  }\n  return this;\n}\n\n/**\n * Update a boolean attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {boolean} val\n * @throws {Error} Invalid key\n */\nfunction _setBooleanOption (key, val) {\n  if (is.bool(val)) {\n    this.options[key] = val;\n  } else {\n    throw is.invalidParameterError(key, 'boolean', val);\n  }\n}\n\n/**\n * Called by a WriteableStream to notify us it is ready for data.\n * @private\n */\nfunction _read () {\n  /* istanbul ignore else */\n  if (!this.options.streamOut) {\n    this.options.streamOut = true;\n    this._pipeline();\n  }\n}\n\n/**\n * Invoke the C++ image processing pipeline\n * Supports callback, stream and promise variants\n * @private\n */\nfunction _pipeline (callback) {\n  if (typeof callback === 'function') {\n    // output=file/buffer\n    if (this._isStreamInput()) {\n      // output=file/buffer, input=stream\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.pipeline(this.options, callback);\n      });\n    } else {\n      // output=file/buffer, input=file/buffer\n      sharp.pipeline(this.options, callback);\n    }\n    return this;\n  } else if (this.options.streamOut) {\n    // output=stream\n    if (this._isStreamInput()) {\n      // output=stream, input=stream\n      this.once('finish', () => {\n        this._flattenBufferIn();\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            this.emit('error', err);\n          } else {\n            this.emit('info', info);\n            this.push(data);\n          }\n          this.push(null);\n        });\n      });\n      if (this.streamInFinished) {\n        this.emit('finish');\n      }\n    } else {\n      // output=stream, input=file/buffer\n      sharp.pipeline(this.options, (err, data, info) => {\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('info', info);\n          this.push(data);\n        }\n        this.push(null);\n      });\n    }\n    return this;\n  } else {\n    // output=promise\n    if (this._isStreamInput()) {\n      // output=promise, input=stream\n      return new Promise((resolve, reject) => {\n        this.once('finish', () => {\n          this._flattenBufferIn();\n          sharp.pipeline(this.options, (err, data, info) => {\n            if (err) {\n              reject(err);\n            } else {\n              if (this.options.resolveWithObject) {\n                resolve({ data, info });\n              } else {\n                resolve(data);\n              }\n            }\n          });\n        });\n      });\n    } else {\n      // output=promise, input=file/buffer\n      return new Promise((resolve, reject) => {\n        sharp.pipeline(this.options, (err, data, info) => {\n          if (err) {\n            reject(err);\n          } else {\n            if (this.options.resolveWithObject) {\n              resolve({ data: data, info: info });\n            } else {\n              resolve(data);\n            }\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with output-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    toFile,\n    toBuffer,\n    withMetadata,\n    toFormat,\n    jpeg,\n    jp2,\n    png,\n    webp,\n    tiff,\n    avif,\n    heif,\n    gif,\n    raw,\n    tile,\n    timeout,\n    // Private\n    _updateFormatOut,\n    _setBooleanOption,\n    _read,\n    _pipeline\n  });\n};\n"]},"metadata":{},"sourceType":"script"}