{"ast":null,"code":"var _jsxFileName = \"/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import Mekamount, { runScript } from './createMekamount.js';\n\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport download from 'downloadjs';\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [nftList, setNftList] = useState([]);\n\n  const getURLData = function () {\n    let baseURL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let requestedURL = baseURL + path + (params.length === 0 ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {\n          'accept': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then(response => {\n        response.json().then(data => {\n          resolve(data);\n        }).catch(error => {\n          reject(`Could not get JSON (${requestedURL})`);\n        });\n      }).catch(error => {\n        reject(`Could not get URL (${requestedURL})`);\n      });\n    });\n  };\n\n  const grabAllNFTs = () => {\n    if (!isGettingNFTS) {\n      setIsGettingNFTs(true);\n      getURLData(\"https://public-api.solscan.io\", \"/account/tokens\", {\n        account: `${walletAddress}`\n      }).then(data => {\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if (token.tokenAmount != null && token.tokenAmount.amount === 1 && token.tokenAmount.decimals === 0) {\n            promises.push(getURLData(\"https://public-api.solscan.io\", `/account/${token.tokenAddress}`));\n          }\n        }); // Get Metadata on all\n\n        Promise.all(promises).then(nfts => {\n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft => {\n            try {\n              if (nft.metadata == null) {\n                throw new Error('No metadata');\n              }\n\n              if (nft.metadata.data.name == null) {\n                throw new Error('No name!');\n              }\n\n              if (nft.metadata.data.collection == null && nft.metadata.data.collection.name == null && nft.tokenInfo.symbol == null) {\n                throw new Error(nft.metadata.data.name + \" Bad collection\");\n              }\n\n              if (nft.metadata.data.image == null) {\n                throw new Error(nft.metadata.data.name + \" Bad image\");\n              }\n\n              if (nft.account == null) {\n                throw new Error(nft.metadata.data.name + \" Bad account\");\n              }\n\n              let collection = nft.metadata.data.collection.name;\n              if (collection == null) collection = nft.tokenInfo.symbol;\n              if (collection == null) collection = nft.metadata.data.collection;\n              nftMetadata.push({\n                name: nft.metadata.data.name,\n                collection: collection,\n                url: nft.metadata.data.image,\n                address: nft.account\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }); //Sort\n\n          nftMetadata.sort((a, b) => {\n            let value = a.collection.localeCompare(b.collection) === 0;\n            return value !== 0 ? value : a.name.localeCompare(b.name);\n          });\n          console.log(nftMetadata.length); //Update\n          // setNftList(nftMetadata + \" \" + nfts.length);\n\n          console.log(\"Done\");\n          setIsGettingNFTs(false);\n        }).catch(error => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        });\n      }).catch(error => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      });\n    } else {\n      console.log(\"Crawling...\");\n    }\n  };\n\n  const downloadNewMek = async () => {\n    if (!isBuilding) {\n      setIsBuilding(true);\n      setMekAddress(\"5B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\"); // setMekAddress(\"B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n\n      setPfpAddress(\"CsTRmLYi8Vgwqwc8fbRG6prAwUakpZRErzp1zXBHZamc\");\n\n      try {\n        const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if (blob.size < 500) {\n          const data = await response.json();\n\n          if (data.error != null) {\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        }\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault(); // sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        onClick: downloadNewMek,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: nftList.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: nft.url,\n          alt: nft.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" className=\\\"sub-text\\\"\", nft.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this); // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {// if (inputValue.length > 0) {\n    //   console.log('Gif link:', inputValue);\n    //   setGifList([...gifList, inputValue]);\n    //   setInputValue('');\n    // } else {\n    //   console.log('Empty input. Try again.');\n    // }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this); // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...'); // Call Solana program here.\n\n      grabAllNFTs(); // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83E\\uDDBE Mekamount PFP Portal [Unoffical]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"N F T \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `Crafted By @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"SfOJ2KIOW98Mg4lWjWOuEDlnAjI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js"],"names":["React","useEffect","useState","querystring","twitterLogo","download","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","mekAddress","setMekAddress","pfpAddress","setPfpAddress","pfpScale","setPfpScale","isBuilding","setIsBuilding","isGettingNFTS","setIsGettingNFTs","inputValue","setInputValue","nftList","setNftList","getURLData","baseURL","path","params","requestedURL","length","stringify","Promise","resolve","reject","fetch","method","cache","headers","redirect","referrerPolicy","then","response","json","data","catch","error","grabAllNFTs","account","promises","forEach","token","tokenAmount","amount","decimals","push","tokenAddress","all","nfts","nftMetadata","nft","metadata","Error","name","collection","tokenInfo","symbol","image","url","address","console","log","sort","a","b","value","localeCompare","alert","downloadNewMek","blob","size","renderConnectedContainer","event","preventDefault","onInputChange","map","checkIfWalletIsConnected","solana","window","isPhantom","connect","onlyIfTrusted","publicKey","toString","connectWallet","target","sendGif","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import Mekamount, { runScript } from './createMekamount.js';\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport download from 'downloadjs';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [nftList, setNftList] = useState([]);\n\n  const getURLData = (baseURL = '', path = '', params = {}) => {\n    let requestedURL = baseURL + path + ((params.length === 0) ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {'accept': 'application/json'},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      }).then((response) => {\n        response.json().then((data)=>{\n          resolve(data);\n        })\n        .catch((error) => {reject(`Could not get JSON (${requestedURL})`);});\n      })\n      .catch((error) => {reject(`Could not get URL (${requestedURL})`);});\n    });\n  }\n\n  const grabAllNFTs = () => {\n    if(!isGettingNFTS){\n      setIsGettingNFTs(true);\n      getURLData(\n        \"https://public-api.solscan.io\",\n        \"/account/tokens\",\n        { account: `${walletAddress}`,},\n      ).then((data) => {\n        \n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if(token.tokenAmount != null && token.tokenAmount.amount === 1 && token.tokenAmount.decimals === 0){\n            promises.push(\n              getURLData(\n                \"https://public-api.solscan.io\",\n                `/account/${token.tokenAddress}`,\n              )\n            );\n          }\n        });\n\n        // Get Metadata on all\n        Promise.all(promises)\n        .then((nfts)=>{\n          \n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft=> {\n            try{\n              if(nft.metadata == null){throw new Error('No metadata');}\n              if(nft.metadata.data.name == null){throw new Error('No name!');}\n              if(nft.metadata.data.collection == null && nft.metadata.data.collection.name == null && nft.tokenInfo.symbol == null){throw new Error(nft.metadata.data.name + \" Bad collection\");}\n              if(nft.metadata.data.image == null){throw new Error(nft.metadata.data.name + \" Bad image\");}\n              if(nft.account == null){throw new Error(nft.metadata.data.name + \" Bad account\");}\n\n              let collection = nft.metadata.data.collection.name;\n              if(collection == null) collection = nft.tokenInfo.symbol;\n              if(collection == null) collection = nft.metadata.data.collection;\n              nftMetadata.push(\n                {\n                  name : nft.metadata.data.name, \n                  collection : collection,\n                  url : nft.metadata.data.image,\n                  address : nft.account,\n                }\n              );\n            } catch (error){\n              console.log(error);\n            }\n          });\n\n          //Sort\n          nftMetadata.sort((a, b)=>{\n            let value = a.collection.localeCompare(b.collection) === 0;\n            return (value !== 0) ? value : a.name.localeCompare(b.name);\n          });\n\n          console.log(nftMetadata.length);\n\n          //Update\n          // setNftList(nftMetadata + \" \" + nfts.length);\n          console.log(\"Done\")\n          setIsGettingNFTs(false);\n        })\n        .catch((error) => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        })\n\n      })\n      .catch((error) => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      })\n    } else {\n      console.log(\"Crawling...\")\n    }\n  }\n\n  const downloadNewMek = async () => {\n    if(!isBuilding){\n      setIsBuilding(true);\n      setMekAddress(\"5B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n      // setMekAddress(\"B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n      setPfpAddress(\"CsTRmLYi8Vgwqwc8fbRG6prAwUakpZRErzp1zXBHZamc\");\n      try {\n        const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if(blob.size < 500){\n          const data = await response.json();\n          if(data.error != null){\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        }\n\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          // sendGif();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\" onClick={downloadNewMek}>\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {/* Map through gifList instead of TEST_GIFS */}\n        {nftList.map((nft) => (\n          <div className=\"gif-item\" key={nft.url}>\n            <img src={nft.url} alt={nft.url} />\n            <p> className=\"sub-text\"{nft.name}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  \n  const sendGif = async () => {\n    // if (inputValue.length > 0) {\n    //   console.log('Gif link:', inputValue);\n    //   setGifList([...gifList, inputValue]);\n    //   setInputValue('');\n    // } else {\n    //   console.log('Empty input. Try again.');\n    // }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...');\n      \n      // Call Solana program here.\n      grabAllNFTs();\n  \n      // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ¦¾ Mekamount PFP Portal [Unoffical]</p>\n          <p className=\"sub-text\">\n            N F T âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Crafted By @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}