{"ast":null,"code":"'use strict';\n\nconst color = require('color');\n\nconst is = require('./is');\n/**\n * Colourspaces.\n * @private\n */\n\n\nconst colourspace = {\n  multiband: 'multiband',\n  'b-w': 'b-w',\n  bw: 'b-w',\n  cmyk: 'cmyk',\n  srgb: 'srgb'\n};\n/**\n * Tint the image using the provided chroma while preserving the image luminance.\n * An alpha channel may be present and will be unchanged by the operation.\n *\n * @param {string|Object} rgb - parsed by the [color](https://www.npmjs.org/package/color) module to extract chroma values.\n * @returns {Sharp}\n * @throws {Error} Invalid parameter\n */\n\nfunction tint(rgb) {\n  const colour = color(rgb);\n  this.options.tintA = colour.a();\n  this.options.tintB = colour.b();\n  return this;\n}\n/**\n * Convert to 8-bit greyscale; 256 shades of grey.\n * This is a linear operation. If the input image is in a non-linear colour space such as sRGB, use `gamma()` with `greyscale()` for the best results.\n * By default the output image will be web-friendly sRGB and contain three (identical) color channels.\n * This may be overridden by other sharp operations such as `toColourspace('b-w')`,\n * which will produce an output image containing one color channel.\n * An alpha channel may be present, and will be unchanged by the operation.\n * @param {Boolean} [greyscale=true]\n * @returns {Sharp}\n */\n\n\nfunction greyscale(greyscale) {\n  this.options.greyscale = is.bool(greyscale) ? greyscale : true;\n  return this;\n}\n/**\n * Alternative spelling of `greyscale`.\n * @param {Boolean} [grayscale=true]\n * @returns {Sharp}\n */\n\n\nfunction grayscale(grayscale) {\n  return this.greyscale(grayscale);\n}\n/**\n * Set the pipeline colourspace.\n *\n * The input image will be converted to the provided colourspace at the start of the pipeline.\n * All operations will use this colourspace before converting to the output colourspace, as defined by {@link toColourspace}.\n *\n * This feature is experimental and has not yet been fully-tested with all operations.\n *\n * @since 0.29.0\n *\n * @example\n * // Run pipeline in 16 bits per channel RGB while converting final result to 8 bits per channel sRGB.\n * await sharp(input)\n *  .pipelineColourspace('rgb16')\n *  .toColourspace('srgb')\n *  .toFile('16bpc-pipeline-to-8bpc-output.png')\n *\n * @param {string} [colourspace] - pipeline colourspace e.g. `rgb16`, `scrgb`, `lab`, `grey16` [...](https://github.com/libvips/libvips/blob/41cff4e9d0838498487a00623462204eb10ee5b8/libvips/iofuncs/enumtypes.c#L774)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction pipelineColourspace(colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n\n  this.options.colourspaceInput = colourspace;\n  return this;\n}\n/**\n * Alternative spelling of `pipelineColourspace`.\n * @param {string} [colorspace] - pipeline colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction pipelineColorspace(colorspace) {\n  return this.pipelineColourspace(colorspace);\n}\n/**\n * Set the output colourspace.\n * By default output image will be web-friendly sRGB, with additional channels interpreted as alpha channels.\n *\n * @example\n * // Output 16 bits per pixel RGB\n * await sharp(input)\n *  .toColourspace('rgb16')\n *  .toFile('16-bpp.png')\n *\n * @param {string} [colourspace] - output colourspace e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://github.com/libvips/libvips/blob/3c0bfdf74ce1dc37a6429bed47fa76f16e2cd70a/libvips/iofuncs/enumtypes.c#L777-L794)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction toColourspace(colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n\n  this.options.colourspace = colourspace;\n  return this;\n}\n/**\n * Alternative spelling of `toColourspace`.\n * @param {string} [colorspace] - output colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction toColorspace(colorspace) {\n  return this.toColourspace(colorspace);\n}\n/**\n * Update a colour attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {string|Object} value\n * @throws {Error} Invalid value\n */\n\n\nfunction _setBackgroundColourOption(key, value) {\n  if (is.defined(value)) {\n    if (is.object(value) || is.string(value)) {\n      const colour = color(value);\n      this.options[key] = [colour.red(), colour.green(), colour.blue(), Math.round(colour.alpha() * 255)];\n    } else {\n      throw is.invalidParameterError('background', 'object or string', value);\n    }\n  }\n}\n/**\n * Decorate the Sharp prototype with colour-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    tint,\n    greyscale,\n    grayscale,\n    pipelineColourspace,\n    pipelineColorspace,\n    toColourspace,\n    toColorspace,\n    // Private\n    _setBackgroundColourOption\n  }); // Class attributes\n\n  Sharp.colourspace = colourspace;\n  Sharp.colorspace = colourspace;\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/node_modules/sharp/lib/colour.js"],"names":["color","require","is","colourspace","multiband","bw","cmyk","srgb","tint","rgb","colour","options","tintA","a","tintB","b","greyscale","bool","grayscale","pipelineColourspace","string","invalidParameterError","colourspaceInput","pipelineColorspace","colorspace","toColourspace","toColorspace","_setBackgroundColourOption","key","value","defined","object","red","green","blue","Math","round","alpha","module","exports","Sharp","Object","assign","prototype"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;;;AACA,MAAME,WAAW,GAAG;AAClBC,EAAAA,SAAS,EAAE,WADO;AAElB,SAAO,KAFW;AAGlBC,EAAAA,EAAE,EAAE,KAHc;AAIlBC,EAAAA,IAAI,EAAE,MAJY;AAKlBC,EAAAA,IAAI,EAAE;AALY,CAApB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAeC,GAAf,EAAoB;AAClB,QAAMC,MAAM,GAAGV,KAAK,CAACS,GAAD,CAApB;AACA,OAAKE,OAAL,CAAaC,KAAb,GAAqBF,MAAM,CAACG,CAAP,EAArB;AACA,OAAKF,OAAL,CAAaG,KAAb,GAAqBJ,MAAM,CAACK,CAAP,EAArB;AACA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBA,SAApB,EAA+B;AAC7B,OAAKL,OAAL,CAAaK,SAAb,GAAyBd,EAAE,CAACe,IAAH,CAAQD,SAAR,IAAqBA,SAArB,GAAiC,IAA1D;AACA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAoBA,SAApB,EAA+B;AAC7B,SAAO,KAAKF,SAAL,CAAeE,SAAf,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA8BhB,WAA9B,EAA2C;AACzC,MAAI,CAACD,EAAE,CAACkB,MAAH,CAAUjB,WAAV,CAAL,EAA6B;AAC3B,UAAMD,EAAE,CAACmB,qBAAH,CAAyB,aAAzB,EAAwC,QAAxC,EAAkDlB,WAAlD,CAAN;AACD;;AACD,OAAKQ,OAAL,CAAaW,gBAAb,GAAgCnB,WAAhC;AACA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,kBAAT,CAA6BC,UAA7B,EAAyC;AACvC,SAAO,KAAKL,mBAAL,CAAyBK,UAAzB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAwBtB,WAAxB,EAAqC;AACnC,MAAI,CAACD,EAAE,CAACkB,MAAH,CAAUjB,WAAV,CAAL,EAA6B;AAC3B,UAAMD,EAAE,CAACmB,qBAAH,CAAyB,aAAzB,EAAwC,QAAxC,EAAkDlB,WAAlD,CAAN;AACD;;AACD,OAAKQ,OAAL,CAAaR,WAAb,GAA2BA,WAA3B;AACA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuB,YAAT,CAAuBF,UAAvB,EAAmC;AACjC,SAAO,KAAKC,aAAL,CAAmBD,UAAnB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,0BAAT,CAAqCC,GAArC,EAA0CC,KAA1C,EAAiD;AAC/C,MAAI3B,EAAE,CAAC4B,OAAH,CAAWD,KAAX,CAAJ,EAAuB;AACrB,QAAI3B,EAAE,CAAC6B,MAAH,CAAUF,KAAV,KAAoB3B,EAAE,CAACkB,MAAH,CAAUS,KAAV,CAAxB,EAA0C;AACxC,YAAMnB,MAAM,GAAGV,KAAK,CAAC6B,KAAD,CAApB;AACA,WAAKlB,OAAL,CAAaiB,GAAb,IAAoB,CAClBlB,MAAM,CAACsB,GAAP,EADkB,EAElBtB,MAAM,CAACuB,KAAP,EAFkB,EAGlBvB,MAAM,CAACwB,IAAP,EAHkB,EAIlBC,IAAI,CAACC,KAAL,CAAW1B,MAAM,CAAC2B,KAAP,KAAiB,GAA5B,CAJkB,CAApB;AAMD,KARD,MAQO;AACL,YAAMnC,EAAE,CAACmB,qBAAH,CAAyB,YAAzB,EAAuC,kBAAvC,EAA2DQ,KAA3D,CAAN;AACD;AACF;AACF;AAED;AACA;AACA;AACA;;;AACAS,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAChCC,EAAAA,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACG,SAApB,EAA+B;AAC7B;AACAnC,IAAAA,IAF6B;AAG7BQ,IAAAA,SAH6B;AAI7BE,IAAAA,SAJ6B;AAK7BC,IAAAA,mBAL6B;AAM7BI,IAAAA,kBAN6B;AAO7BE,IAAAA,aAP6B;AAQ7BC,IAAAA,YAR6B;AAS7B;AACAC,IAAAA;AAV6B,GAA/B,EADgC,CAahC;;AACAa,EAAAA,KAAK,CAACrC,WAAN,GAAoBA,WAApB;AACAqC,EAAAA,KAAK,CAAChB,UAAN,GAAmBrB,WAAnB;AACD,CAhBD","sourcesContent":["'use strict';\n\nconst color = require('color');\nconst is = require('./is');\n\n/**\n * Colourspaces.\n * @private\n */\nconst colourspace = {\n  multiband: 'multiband',\n  'b-w': 'b-w',\n  bw: 'b-w',\n  cmyk: 'cmyk',\n  srgb: 'srgb'\n};\n\n/**\n * Tint the image using the provided chroma while preserving the image luminance.\n * An alpha channel may be present and will be unchanged by the operation.\n *\n * @param {string|Object} rgb - parsed by the [color](https://www.npmjs.org/package/color) module to extract chroma values.\n * @returns {Sharp}\n * @throws {Error} Invalid parameter\n */\nfunction tint (rgb) {\n  const colour = color(rgb);\n  this.options.tintA = colour.a();\n  this.options.tintB = colour.b();\n  return this;\n}\n\n/**\n * Convert to 8-bit greyscale; 256 shades of grey.\n * This is a linear operation. If the input image is in a non-linear colour space such as sRGB, use `gamma()` with `greyscale()` for the best results.\n * By default the output image will be web-friendly sRGB and contain three (identical) color channels.\n * This may be overridden by other sharp operations such as `toColourspace('b-w')`,\n * which will produce an output image containing one color channel.\n * An alpha channel may be present, and will be unchanged by the operation.\n * @param {Boolean} [greyscale=true]\n * @returns {Sharp}\n */\nfunction greyscale (greyscale) {\n  this.options.greyscale = is.bool(greyscale) ? greyscale : true;\n  return this;\n}\n\n/**\n * Alternative spelling of `greyscale`.\n * @param {Boolean} [grayscale=true]\n * @returns {Sharp}\n */\nfunction grayscale (grayscale) {\n  return this.greyscale(grayscale);\n}\n\n/**\n * Set the pipeline colourspace.\n *\n * The input image will be converted to the provided colourspace at the start of the pipeline.\n * All operations will use this colourspace before converting to the output colourspace, as defined by {@link toColourspace}.\n *\n * This feature is experimental and has not yet been fully-tested with all operations.\n *\n * @since 0.29.0\n *\n * @example\n * // Run pipeline in 16 bits per channel RGB while converting final result to 8 bits per channel sRGB.\n * await sharp(input)\n *  .pipelineColourspace('rgb16')\n *  .toColourspace('srgb')\n *  .toFile('16bpc-pipeline-to-8bpc-output.png')\n *\n * @param {string} [colourspace] - pipeline colourspace e.g. `rgb16`, `scrgb`, `lab`, `grey16` [...](https://github.com/libvips/libvips/blob/41cff4e9d0838498487a00623462204eb10ee5b8/libvips/iofuncs/enumtypes.c#L774)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction pipelineColourspace (colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n  this.options.colourspaceInput = colourspace;\n  return this;\n}\n\n/**\n * Alternative spelling of `pipelineColourspace`.\n * @param {string} [colorspace] - pipeline colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction pipelineColorspace (colorspace) {\n  return this.pipelineColourspace(colorspace);\n}\n\n/**\n * Set the output colourspace.\n * By default output image will be web-friendly sRGB, with additional channels interpreted as alpha channels.\n *\n * @example\n * // Output 16 bits per pixel RGB\n * await sharp(input)\n *  .toColourspace('rgb16')\n *  .toFile('16-bpp.png')\n *\n * @param {string} [colourspace] - output colourspace e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://github.com/libvips/libvips/blob/3c0bfdf74ce1dc37a6429bed47fa76f16e2cd70a/libvips/iofuncs/enumtypes.c#L777-L794)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction toColourspace (colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n  this.options.colourspace = colourspace;\n  return this;\n}\n\n/**\n * Alternative spelling of `toColourspace`.\n * @param {string} [colorspace] - output colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction toColorspace (colorspace) {\n  return this.toColourspace(colorspace);\n}\n\n/**\n * Update a colour attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {string|Object} value\n * @throws {Error} Invalid value\n */\nfunction _setBackgroundColourOption (key, value) {\n  if (is.defined(value)) {\n    if (is.object(value) || is.string(value)) {\n      const colour = color(value);\n      this.options[key] = [\n        colour.red(),\n        colour.green(),\n        colour.blue(),\n        Math.round(colour.alpha() * 255)\n      ];\n    } else {\n      throw is.invalidParameterError('background', 'object or string', value);\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with colour-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    tint,\n    greyscale,\n    grayscale,\n    pipelineColourspace,\n    pipelineColorspace,\n    toColourspace,\n    toColorspace,\n    // Private\n    _setBackgroundColourOption\n  });\n  // Class attributes\n  Sharp.colourspace = colourspace;\n  Sharp.colorspace = colourspace;\n};\n"]},"metadata":{},"sourceType":"script"}