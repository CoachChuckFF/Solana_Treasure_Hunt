{"ast":null,"code":"'use strict';\n/**\n * Is this value defined and not null?\n * @private\n */\n\nconst defined = function (val) {\n  return typeof val !== 'undefined' && val !== null;\n};\n/**\n * Is this value an object?\n * @private\n */\n\n\nconst object = function (val) {\n  return typeof val === 'object';\n};\n/**\n * Is this value a plain object?\n * @private\n */\n\n\nconst plainObject = function (val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n};\n/**\n * Is this value a function?\n * @private\n */\n\n\nconst fn = function (val) {\n  return typeof val === 'function';\n};\n/**\n * Is this value a boolean?\n * @private\n */\n\n\nconst bool = function (val) {\n  return typeof val === 'boolean';\n};\n/**\n * Is this value a Buffer object?\n * @private\n */\n\n\nconst buffer = function (val) {\n  return val instanceof Buffer;\n};\n/**\n * Is this value a typed array object?. E.g. Uint8Array or Uint8ClampedArray?\n * @private\n */\n\n\nconst typedArray = function (val) {\n  if (defined(val)) {\n    switch (val.constructor) {\n      case Uint8Array:\n      case Uint8ClampedArray:\n      case Int8Array:\n      case Uint16Array:\n      case Int16Array:\n      case Uint32Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Is this value a non-empty string?\n * @private\n */\n\n\nconst string = function (val) {\n  return typeof val === 'string' && val.length > 0;\n};\n/**\n * Is this value a real number?\n * @private\n */\n\n\nconst number = function (val) {\n  return typeof val === 'number' && !Number.isNaN(val);\n};\n/**\n * Is this value an integer?\n * @private\n */\n\n\nconst integer = function (val) {\n  return Number.isInteger(val);\n};\n/**\n * Is this value within an inclusive given range?\n * @private\n */\n\n\nconst inRange = function (val, min, max) {\n  return val >= min && val <= max;\n};\n/**\n * Is this value within the elements of an array?\n * @private\n */\n\n\nconst inArray = function (val, list) {\n  return list.includes(val);\n};\n/**\n * Create an Error with a message relating to an invalid parameter.\n *\n * @param {string} name - parameter name.\n * @param {string} expected - description of the type/value/range expected.\n * @param {*} actual - the value received.\n * @returns {Error} Containing the formatted message.\n * @private\n */\n\n\nconst invalidParameterError = function (name, expected, actual) {\n  return new Error(`Expected ${expected} for ${name} but received ${actual} of type ${typeof actual}`);\n};\n\nmodule.exports = {\n  defined: defined,\n  object: object,\n  plainObject: plainObject,\n  fn: fn,\n  bool: bool,\n  buffer: buffer,\n  typedArray: typedArray,\n  string: string,\n  number: number,\n  integer: integer,\n  inRange: inRange,\n  inArray: inArray,\n  invalidParameterError: invalidParameterError\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/node_modules/sharp/lib/is.js"],"names":["defined","val","object","plainObject","Object","prototype","toString","call","fn","bool","buffer","Buffer","typedArray","constructor","Uint8Array","Uint8ClampedArray","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","string","length","number","Number","isNaN","integer","isInteger","inRange","min","max","inArray","list","includes","invalidParameterError","name","expected","actual","Error","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Is this value defined and not null?\n * @private\n */\nconst defined = function (val) {\n  return typeof val !== 'undefined' && val !== null;\n};\n\n/**\n * Is this value an object?\n * @private\n */\nconst object = function (val) {\n  return typeof val === 'object';\n};\n\n/**\n * Is this value a plain object?\n * @private\n */\nconst plainObject = function (val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n};\n\n/**\n * Is this value a function?\n * @private\n */\nconst fn = function (val) {\n  return typeof val === 'function';\n};\n\n/**\n * Is this value a boolean?\n * @private\n */\nconst bool = function (val) {\n  return typeof val === 'boolean';\n};\n\n/**\n * Is this value a Buffer object?\n * @private\n */\nconst buffer = function (val) {\n  return val instanceof Buffer;\n};\n\n/**\n * Is this value a typed array object?. E.g. Uint8Array or Uint8ClampedArray?\n * @private\n */\nconst typedArray = function (val) {\n  if (defined(val)) {\n    switch (val.constructor) {\n      case Uint8Array:\n      case Uint8ClampedArray:\n      case Int8Array:\n      case Uint16Array:\n      case Int16Array:\n      case Uint32Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Is this value a non-empty string?\n * @private\n */\nconst string = function (val) {\n  return typeof val === 'string' && val.length > 0;\n};\n\n/**\n * Is this value a real number?\n * @private\n */\nconst number = function (val) {\n  return typeof val === 'number' && !Number.isNaN(val);\n};\n\n/**\n * Is this value an integer?\n * @private\n */\nconst integer = function (val) {\n  return Number.isInteger(val);\n};\n\n/**\n * Is this value within an inclusive given range?\n * @private\n */\nconst inRange = function (val, min, max) {\n  return val >= min && val <= max;\n};\n\n/**\n * Is this value within the elements of an array?\n * @private\n */\nconst inArray = function (val, list) {\n  return list.includes(val);\n};\n\n/**\n * Create an Error with a message relating to an invalid parameter.\n *\n * @param {string} name - parameter name.\n * @param {string} expected - description of the type/value/range expected.\n * @param {*} actual - the value received.\n * @returns {Error} Containing the formatted message.\n * @private\n */\nconst invalidParameterError = function (name, expected, actual) {\n  return new Error(\n    `Expected ${expected} for ${name} but received ${actual} of type ${typeof actual}`\n  );\n};\n\nmodule.exports = {\n  defined: defined,\n  object: object,\n  plainObject: plainObject,\n  fn: fn,\n  bool: bool,\n  buffer: buffer,\n  typedArray: typedArray,\n  string: string,\n  number: number,\n  integer: integer,\n  inRange: inRange,\n  inArray: inArray,\n  invalidParameterError: invalidParameterError\n};\n"]},"metadata":{},"sourceType":"script"}