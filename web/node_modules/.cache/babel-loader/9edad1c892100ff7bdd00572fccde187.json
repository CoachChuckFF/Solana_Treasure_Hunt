{"ast":null,"code":"var _jsxFileName = \"/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import Mekamount, { runScript } from './createMekamount.js';\n\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport download from 'downloadjs';\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const getURLData = function () {\n    let baseURL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let requestedURL = baseURL + path + (params.length == 0 ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {\n          'accept': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then(response => {\n        response.json().then(data => {\n          resolve(data);\n        }).catch(error => {\n          reject(`Could not get JSON (${requestedURL})`);\n        });\n      }).catch(error => {\n        reject(`Could not get URL (${requestedURL})`);\n      });\n    });\n  };\n\n  const grabAllNFTs = () => {\n    if (!isGettingNFTS) {\n      //Grab tokens\n      getURLData(\"https://public-api.solscan.io\", \"/account/tokens\", {\n        account: `${walletAddress}`\n      }).then(data => {\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          console.log(token);\n\n          if (token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0) {\n            // promises.push(\n            //   getURLData(\n            //     \"https://public-api.solscan.io\",\n            //     `/account/${token.tokenAddress}`,\n            //     { account: `${walletAddress}`,},\n            //   )\n            // );\n            getURLData(\"https://public-api.solscan.io\", `/account/${token.tokenAddress}`).then(nft => {\n              console.log(nft.data.image);\n            });\n          }\n        }); //Get Metadata on all\n        // Promise.all(promises)\n        // .then((nfts)=>{\n        //   console.log(nfts);\n        // });\n      });\n    } else {\n      alert('Crawling...');\n    }\n  };\n\n  const downloadNewMek = async () => {\n    if (!isBuilding) {\n      setIsBuilding(true);\n      setMekAddress(\"5B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\"); // setMekAddress(\"B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n\n      setPfpAddress(\"CsTRmLYi8Vgwqwc8fbRG6prAwUakpZRErzp1zXBHZamc\");\n\n      try {\n        const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if (blob.size < 500) {\n          const data = await response.json();\n\n          if (data.error != null) {\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        }\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        onClick: grabAllNFTs,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: gifList.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, gif, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this); // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      grabAllNFTs();\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this); // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...'); // Call Solana program here.\n      // Mekamount.runScript();\n      // console.log(callMekaBackend());\n      // Set state\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83E\\uDDBE Mekamount PFP Portal [Unoffical]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"N F T \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `Crafted By @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bJuinBZJuroIH7D5RYQ2essTsDM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js"],"names":["React","useEffect","useState","querystring","twitterLogo","download","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","walletAddress","setWalletAddress","mekAddress","setMekAddress","pfpAddress","setPfpAddress","pfpScale","setPfpScale","isBuilding","setIsBuilding","isGettingNFTS","setIsGettingNFTs","inputValue","setInputValue","gifList","setGifList","getURLData","baseURL","path","params","requestedURL","length","stringify","Promise","resolve","reject","fetch","method","cache","headers","redirect","referrerPolicy","then","response","json","data","catch","error","grabAllNFTs","account","promises","forEach","token","console","log","tokenAmount","amount","decimals","tokenAddress","nft","image","alert","downloadNewMek","blob","size","renderConnectedContainer","event","preventDefault","sendGif","onInputChange","map","gif","checkIfWalletIsConnected","solana","window","isPhantom","connect","onlyIfTrusted","publicKey","toString","connectWallet","value","target","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import Mekamount, { runScript } from './createMekamount.js';\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport download from 'downloadjs';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const getURLData = (baseURL = '', path = '', params = {}) => {\n    let requestedURL = baseURL + path + ((params.length == 0) ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {'accept': 'application/json'},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      }).then((response) => {\n        response.json().then((data)=>{\n          resolve(data);\n        })\n        .catch((error) => {reject(`Could not get JSON (${requestedURL})`);});\n      })\n      .catch((error) => {reject(`Could not get URL (${requestedURL})`);});\n    });\n  }\n\n  const grabAllNFTs = () => {\n    if(!isGettingNFTS){\n      //Grab tokens\n      getURLData(\n        \"https://public-api.solscan.io\",\n        \"/account/tokens\",\n        { account: `${walletAddress}`,},\n      ).then((data) => {\n\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          console.log(token);        \n          if(token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0){\n            // promises.push(\n            //   getURLData(\n            //     \"https://public-api.solscan.io\",\n            //     `/account/${token.tokenAddress}`,\n            //     { account: `${walletAddress}`,},\n            //   )\n            // );\n            getURLData(\n              \"https://public-api.solscan.io\",\n              `/account/${token.tokenAddress}`,\n            ).then((nft) => {\n              console.log(nft.data.image);\n            });\n          }\n        });\n\n        //Get Metadata on all\n        // Promise.all(promises)\n        // .then((nfts)=>{\n        //   console.log(nfts);\n        // });\n\n      });\n    } else {\n      alert('Crawling...');\n    }\n  }\n\n  const downloadNewMek = async () => {\n    if(!isBuilding){\n      setIsBuilding(true);\n      setMekAddress(\"5B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n      // setMekAddress(\"B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n      setPfpAddress(\"CsTRmLYi8Vgwqwc8fbRG6prAwUakpZRErzp1zXBHZamc\");\n      try {\n        const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if(blob.size < 500){\n          const data = await response.json();\n          if(data.error != null){\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        }\n\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendGif();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\" onClick={grabAllNFTs}>\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {/* Map through gifList instead of TEST_GIFS */}\n        {gifList.map((gif) => (\n          <div className=\"gif-item\" key={gif}>\n            <img src={gif} alt={gif} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      grabAllNFTs();\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  \n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...');\n      \n      // Call Solana program here.\n      // Mekamount.runScript();\n      // console.log(callMekaBackend());\n  \n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ¦¾ Mekamount PFP Portal [Unoffical]</p>\n          <p className=\"sub-text\">\n            N F T âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Crafted By @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}