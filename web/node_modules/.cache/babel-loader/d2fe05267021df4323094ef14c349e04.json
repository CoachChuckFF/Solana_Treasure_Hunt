{"ast":null,"code":"'use strict';\n\nconst events = require('events');\n\nconst detectLibc = require('detect-libc');\n\nconst is = require('./is');\n\nconst platformAndArch = require('./platform')();\n\nconst sharp = require('./sharp');\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\n\n\nconst format = sharp.format();\n/**\n * An Object containing the available interpolators and their proper values\n * @readonly\n * @enum {string}\n */\n\nconst interpolators = {\n  /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n  nearest: 'nearest',\n\n  /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n  bilinear: 'bilinear',\n\n  /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n  bicubic: 'bicubic',\n\n  /** [LBB interpolation](https://github.com/jcupitt/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2. */\n  locallyBoundedBicubic: 'lbb',\n\n  /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n  nohalo: 'nohalo',\n\n  /** [VSQBS interpolation](https://github.com/jcupitt/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n  vertexSplitQuadraticBasisSpline: 'vsqbs'\n};\n/**\n * An Object containing the version numbers of libvips and its dependencies.\n * @member\n * @example\n * console.log(sharp.versions);\n */\n\nlet versions = {\n  vips: sharp.libvipsVersion()\n};\n\ntry {\n  versions = require(`../vendor/${versions.vips}/${platformAndArch}/versions.json`);\n} catch (err) {}\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|boolean} [options=true] - Object with the following attributes, or boolean where true uses default cache settings and false removes all caching\n * @param {number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {number} [options.files=20] - is the maximum number of files to hold open\n * @param {number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\n\n\nfunction cache(options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\n\ncache(true);\n/**\n * Gets or, when a concurrency is provided, sets\n * the number of threads _libvips'_ should create to process each image.\n *\n * The default value is the number of CPU cores,\n * except when using glibc-based Linux without jemalloc,\n * where the default is `1` to help reduce memory fragmentation.\n *\n * A value of `0` will reset this to the number of CPU cores.\n *\n * The maximum number of images that can be processed in parallel\n * is limited by libuv's `UV_THREADPOOL_SIZE` environment variable.\n *\n * This method always returns the current concurrency.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {number} [concurrency]\n * @returns {number} concurrency\n */\n\nfunction concurrency(concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/* istanbul ignore next */\n\n\nif (detectLibc.family === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {\n  // Reduce default concurrency to 1 when using glibc memory allocator\n  sharp.concurrency(1);\n}\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\n\n\nconst queue = new events.EventEmitter();\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\n\nfunction counters() {\n  return sharp.counters();\n}\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with liborc support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of liborc is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using liborc at runtime\n *\n * @param {boolean} [simd=true]\n * @returns {boolean}\n */\n\n\nfunction simd(simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\n\nsimd(true);\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\n\nmodule.exports = function (Sharp) {\n  Sharp.cache = cache;\n  Sharp.concurrency = concurrency;\n  Sharp.counters = counters;\n  Sharp.simd = simd;\n  Sharp.format = format;\n  Sharp.interpolators = interpolators;\n  Sharp.versions = versions;\n  Sharp.queue = queue;\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/node_modules/sharp/lib/utility.js"],"names":["events","require","detectLibc","is","platformAndArch","sharp","format","interpolators","nearest","bilinear","bicubic","locallyBoundedBicubic","nohalo","vertexSplitQuadraticBasisSpline","versions","vips","libvipsVersion","err","cache","options","bool","object","memory","files","items","concurrency","integer","family","GLIBC","_isUsingJemalloc","queue","EventEmitter","counters","simd","module","exports","Sharp"],"mappings":"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","sourcesContent":["'use strict';\n\nconst events = require('events');\nconst detectLibc = require('detect-libc');\n\nconst is = require('./is');\nconst platformAndArch = require('./platform')();\nconst sharp = require('./sharp');\n\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\nconst format = sharp.format();\n\n/**\n * An Object containing the available interpolators and their proper values\n * @readonly\n * @enum {string}\n */\nconst interpolators = {\n  /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n  nearest: 'nearest',\n  /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n  bilinear: 'bilinear',\n  /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n  bicubic: 'bicubic',\n  /** [LBB interpolation](https://github.com/jcupitt/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2. */\n  locallyBoundedBicubic: 'lbb',\n  /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n  nohalo: 'nohalo',\n  /** [VSQBS interpolation](https://github.com/jcupitt/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n  vertexSplitQuadraticBasisSpline: 'vsqbs'\n};\n\n/**\n * An Object containing the version numbers of libvips and its dependencies.\n * @member\n * @example\n * console.log(sharp.versions);\n */\nlet versions = {\n  vips: sharp.libvipsVersion()\n};\ntry {\n  versions = require(`../vendor/${versions.vips}/${platformAndArch}/versions.json`);\n} catch (err) {}\n\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|boolean} [options=true] - Object with the following attributes, or boolean where true uses default cache settings and false removes all caching\n * @param {number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {number} [options.files=20] - is the maximum number of files to hold open\n * @param {number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\nfunction cache (options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\ncache(true);\n\n/**\n * Gets or, when a concurrency is provided, sets\n * the number of threads _libvips'_ should create to process each image.\n *\n * The default value is the number of CPU cores,\n * except when using glibc-based Linux without jemalloc,\n * where the default is `1` to help reduce memory fragmentation.\n *\n * A value of `0` will reset this to the number of CPU cores.\n *\n * The maximum number of images that can be processed in parallel\n * is limited by libuv's `UV_THREADPOOL_SIZE` environment variable.\n *\n * This method always returns the current concurrency.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {number} [concurrency]\n * @returns {number} concurrency\n */\nfunction concurrency (concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/* istanbul ignore next */\nif (detectLibc.family === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {\n  // Reduce default concurrency to 1 when using glibc memory allocator\n  sharp.concurrency(1);\n}\n\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\nconst queue = new events.EventEmitter();\n\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\nfunction counters () {\n  return sharp.counters();\n}\n\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with liborc support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of liborc is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using liborc at runtime\n *\n * @param {boolean} [simd=true]\n * @returns {boolean}\n */\nfunction simd (simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\nsimd(true);\n\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Sharp.cache = cache;\n  Sharp.concurrency = concurrency;\n  Sharp.counters = counters;\n  Sharp.simd = simd;\n  Sharp.format = format;\n  Sharp.interpolators = interpolators;\n  Sharp.versions = versions;\n  Sharp.queue = queue;\n};\n"]},"metadata":{},"sourceType":"script"}