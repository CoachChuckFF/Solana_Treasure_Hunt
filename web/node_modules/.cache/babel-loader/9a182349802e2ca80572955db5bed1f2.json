{"ast":null,"code":"'use strict';\n\nvar platform = require('os').platform();\n\nvar spawnSync = require('child_process').spawnSync;\n\nvar readdirSync = require('fs').readdirSync;\n\nvar GLIBC = 'glibc';\nvar MUSL = 'musl';\nvar spawnOptions = {\n  encoding: 'utf8',\n  env: process.env\n};\n\nif (!spawnSync) {\n  spawnSync = function () {\n    return {\n      status: 126,\n      stdout: '',\n      stderr: ''\n    };\n  };\n}\n\nfunction contains(needle) {\n  return function (haystack) {\n    return haystack.indexOf(needle) !== -1;\n  };\n}\n\nfunction versionFromMuslLdd(out) {\n  return out.split(/[\\r\\n]+/)[1].trim().split(/\\s/)[1];\n}\n\nfunction safeReaddirSync(path) {\n  try {\n    return readdirSync(path);\n  } catch (e) {}\n\n  return [];\n}\n\nvar family = '';\nvar version = '';\nvar method = '';\n\nif (platform === 'linux') {\n  // Try getconf\n  var glibc = spawnSync('getconf', ['GNU_LIBC_VERSION'], spawnOptions);\n\n  if (glibc.status === 0) {\n    family = GLIBC;\n    version = glibc.stdout.trim().split(' ')[1];\n    method = 'getconf';\n  } else {\n    // Try ldd\n    var ldd = spawnSync('ldd', ['--version'], spawnOptions);\n\n    if (ldd.status === 0 && ldd.stdout.indexOf(MUSL) !== -1) {\n      family = MUSL;\n      version = versionFromMuslLdd(ldd.stdout);\n      method = 'ldd';\n    } else if (ldd.status === 1 && ldd.stderr.indexOf(MUSL) !== -1) {\n      family = MUSL;\n      version = versionFromMuslLdd(ldd.stderr);\n      method = 'ldd';\n    } else {\n      // Try filesystem (family only)\n      var lib = safeReaddirSync('/lib');\n\n      if (lib.some(contains('-linux-gnu'))) {\n        family = GLIBC;\n        method = 'filesystem';\n      } else if (lib.some(contains('libc.musl-'))) {\n        family = MUSL;\n        method = 'filesystem';\n      } else if (lib.some(contains('ld-musl-'))) {\n        family = MUSL;\n        method = 'filesystem';\n      } else {\n        var usrSbin = safeReaddirSync('/usr/sbin');\n\n        if (usrSbin.some(contains('glibc'))) {\n          family = GLIBC;\n          method = 'filesystem';\n        }\n      }\n    }\n  }\n}\n\nvar isNonGlibcLinux = family !== '' && family !== GLIBC;\nmodule.exports = {\n  GLIBC: GLIBC,\n  MUSL: MUSL,\n  family: family,\n  version: version,\n  method: method,\n  isNonGlibcLinux: isNonGlibcLinux\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/node_modules/detect-libc/lib/detect-libc.js"],"names":["platform","require","spawnSync","readdirSync","GLIBC","MUSL","spawnOptions","encoding","env","process","status","stdout","stderr","contains","needle","haystack","indexOf","versionFromMuslLdd","out","split","trim","safeReaddirSync","path","e","family","version","method","glibc","ldd","lib","some","usrSbin","isNonGlibcLinux","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar platform = require('os').platform();\nvar spawnSync = require('child_process').spawnSync;\nvar readdirSync = require('fs').readdirSync;\n\nvar GLIBC = 'glibc';\nvar MUSL = 'musl';\n\nvar spawnOptions = {\n  encoding: 'utf8',\n  env: process.env\n};\n\nif (!spawnSync) {\n  spawnSync = function () {\n    return { status: 126, stdout: '', stderr: '' };\n  };\n}\n\nfunction contains (needle) {\n  return function (haystack) {\n    return haystack.indexOf(needle) !== -1;\n  };\n}\n\nfunction versionFromMuslLdd (out) {\n  return out.split(/[\\r\\n]+/)[1].trim().split(/\\s/)[1];\n}\n\nfunction safeReaddirSync (path) {\n  try {\n    return readdirSync(path);\n  } catch (e) {}\n  return [];\n}\n\nvar family = '';\nvar version = '';\nvar method = '';\n\nif (platform === 'linux') {\n  // Try getconf\n  var glibc = spawnSync('getconf', ['GNU_LIBC_VERSION'], spawnOptions);\n  if (glibc.status === 0) {\n    family = GLIBC;\n    version = glibc.stdout.trim().split(' ')[1];\n    method = 'getconf';\n  } else {\n    // Try ldd\n    var ldd = spawnSync('ldd', ['--version'], spawnOptions);\n    if (ldd.status === 0 && ldd.stdout.indexOf(MUSL) !== -1) {\n      family = MUSL;\n      version = versionFromMuslLdd(ldd.stdout);\n      method = 'ldd';\n    } else if (ldd.status === 1 && ldd.stderr.indexOf(MUSL) !== -1) {\n      family = MUSL;\n      version = versionFromMuslLdd(ldd.stderr);\n      method = 'ldd';\n    } else {\n      // Try filesystem (family only)\n      var lib = safeReaddirSync('/lib');\n      if (lib.some(contains('-linux-gnu'))) {\n        family = GLIBC;\n        method = 'filesystem';\n      } else if (lib.some(contains('libc.musl-'))) {\n        family = MUSL;\n        method = 'filesystem';\n      } else if (lib.some(contains('ld-musl-'))) {\n        family = MUSL;\n        method = 'filesystem';\n      } else {\n        var usrSbin = safeReaddirSync('/usr/sbin');\n        if (usrSbin.some(contains('glibc'))) {\n          family = GLIBC;\n          method = 'filesystem';\n        }\n      }\n    }\n  }\n}\n\nvar isNonGlibcLinux = (family !== '' && family !== GLIBC);\n\nmodule.exports = {\n  GLIBC: GLIBC,\n  MUSL: MUSL,\n  family: family,\n  version: version,\n  method: method,\n  isNonGlibcLinux: isNonGlibcLinux\n};\n"]},"metadata":{},"sourceType":"script"}