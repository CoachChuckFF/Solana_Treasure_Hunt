{"ast":null,"code":"var _jsxFileName = \"/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import Mekamount, { runScript } from './createMekamount.js';\n\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport download from 'downloadjs';\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isRunning, setIsRunning] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const seeAllNFTs = () => {\n    fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n  };\n\n  const grabData = async function () {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // const parameters = {\n    //   offset: 0,\n    //   limit: 1,\n    //   tokenAddress: nftAddress\n    // }\n    // const url = {\n    //   hostname: 'https://public-api.solscan.io/account/tokens?',\n    //   path: \"/token/holders?\" + querystring.stringify(parameters),\n    //   headers: {\n    //     'accept': 'application/json'\n    //   }\n    // }\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: 'GET',\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'accept': 'application/json'\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer' // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      // body: JSON.stringify(params) // body data type must match \"Content-Type\" header\n\n    });\n    return await response.json(); // parses JSON response into native JavaScript objects\n  };\n\n  const downloadNewMek = async () => {\n    console.log(grabData(\"https://public-api.solscan.io/account/tokens?\" + querystring.stringify({\n      account: `${walletAddress}`\n    }))); // if(!isRunning){\n    //   setMekAddress(\"5B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n    //   // setMekAddress(\"B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n    //   setPfpAddress(\"CsTRmLYi8Vgwqwc8fbRG6prAwUakpZRErzp1zXBHZamc\");\n    //   setIsRunning(true);\n    //   try {\n    //     const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n    //     const blob = await response.blob();\n    //     if(blob.size < 500){\n    //       const data = await response.json();\n    //       if(data.error != null){\n    //         alert(data.error);\n    //       } else {\n    //         alert('Error merging NFTs');\n    //       }\n    //     }\n    //   } catch (error) {\n    //     alert('Error merging NFTs');\n    //   }\n    //   setIsRunning(false);\n    // } else {\n    //   alert('Running...');\n    // }\n  };\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        onClick: downloadNewMek,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: gifList.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, gif, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this); // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this); // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...'); // Call Solana program here.\n      // Mekamount.runScript();\n      // console.log(callMekaBackend());\n      // Set state\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83E\\uDDBE Mekamount PFP Portal [Unoffical]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"N F T \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `Crafted By @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"YXVITAQJ+qwf6rX/lGYy+AReWbM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js"],"names":["React","useEffect","useState","querystring","twitterLogo","download","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","walletAddress","setWalletAddress","mekAddress","setMekAddress","pfpAddress","setPfpAddress","pfpScale","setPfpScale","isRunning","setIsRunning","inputValue","setInputValue","gifList","setGifList","seeAllNFTs","fetch","grabData","url","params","response","method","cache","headers","redirect","referrerPolicy","json","downloadNewMek","console","log","stringify","account","renderConnectedContainer","event","preventDefault","sendGif","onInputChange","map","gif","checkIfWalletIsConnected","solana","window","isPhantom","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","value","target","length","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import Mekamount, { runScript } from './createMekamount.js';\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport download from 'downloadjs';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isRunning, setIsRunning] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const seeAllNFTs = () => {\n    fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`)\n  }\n\n  const grabData = async (url = '', params = {}) => {\n\n    // const parameters = {\n    //   offset: 0,\n    //   limit: 1,\n    //   tokenAddress: nftAddress\n    // }\n    // const url = {\n    //   hostname: 'https://public-api.solscan.io/account/tokens?',\n    //   path: \"/token/holders?\" + querystring.stringify(parameters),\n    //   headers: {\n    //     'accept': 'application/json'\n    //   }\n    // }\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: 'GET',\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'accept': 'application/json'\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      // body: JSON.stringify(params) // body data type must match \"Content-Type\" header\n    });\n    return await response.json(); // parses JSON response into native JavaScript objects\n  }\n\n  const downloadNewMek = async () => {\n    console.log(grabData(\n      \"https://public-api.solscan.io/account/tokens?\" + querystring.stringify({ account: `${walletAddress}`,}), \n    ));\n    // if(!isRunning){\n    //   setMekAddress(\"5B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n    //   // setMekAddress(\"B1QZJYws1Nnp8Kh3FWVoeQbasr5tJeyiZZnWz8sxDZf\");\n    //   setPfpAddress(\"CsTRmLYi8Vgwqwc8fbRG6prAwUakpZRErzp1zXBHZamc\");\n    //   setIsRunning(true);\n    //   try {\n    //     const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress}/pfp/${pfpAddress}/scale/${pfpScale}`);\n    //     const blob = await response.blob();\n\n    //     if(blob.size < 500){\n    //       const data = await response.json();\n    //       if(data.error != null){\n    //         alert(data.error);\n    //       } else {\n    //         alert('Error merging NFTs');\n    //       }\n    //     }\n\n    //   } catch (error) {\n    //     alert('Error merging NFTs');\n    //   }\n\n    //   setIsRunning(false);\n    // } else {\n    //   alert('Running...');\n    // }\n  };\n\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendGif();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\" onClick={downloadNewMek}>\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {/* Map through gifList instead of TEST_GIFS */}\n        {gifList.map((gif) => (\n          <div className=\"gif-item\" key={gif}>\n            <img src={gif} alt={gif} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  \n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...');\n      \n      // Call Solana program here.\n      // Mekamount.runScript();\n      // console.log(callMekaBackend());\n  \n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ¦¾ Mekamount PFP Portal [Unoffical]</p>\n          <p className=\"sub-text\">\n            N F T âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Crafted By @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}