{"ast":null,"code":"var _jsxFileName = \"/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import Mekamount, { runScript } from './createMekamount.js';\n\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport mekaHolder from './assets/meka.png';\nimport pfpHolder from './assets/pfp.png';\nimport download from 'downloadjs';\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [credisLeft, setCreditsLeft] = useState(0);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [didDownload, setDidDownload] = useState(false);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [nftList, setNftList] = useState([]);\n\n  const getURLData = function () {\n    let baseURL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let requestedURL = baseURL + path + (params.length == 0 ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {\n          'accept': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then(response => {\n        response.json().then(data => {\n          resolve(data);\n        }).catch(error => {\n          reject(`Could not get JSON (${requestedURL})`);\n        });\n      }).catch(error => {\n        reject(`Could not get URL (${requestedURL})`);\n      });\n    });\n  };\n\n  const grabAllNFTs = () => {\n    if (!isGettingNFTS) {\n      setIsGettingNFTs(true);\n      getURLData(\"https://public-api.solscan.io\", \"/account/tokens\", {\n        account: `${walletAddress}`\n      }).then(data => {\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if (token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0) {\n            promises.push(getURLData(\"https://public-api.solscan.io\", `/account/${token.tokenAddress}`));\n          }\n        }); // Get Metadata on all\n\n        Promise.all(promises).then(nfts => {\n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft => {\n            try {\n              if (nft.metadata == null) {\n                throw new Error('No metadata');\n              }\n\n              if (nft.metadata.data.name == null) {\n                throw new Error('No name!');\n              }\n\n              if (nft.metadata.data.collection == null && nft.tokenInfo.symbol == null) {\n                throw new Error(nft.metadata.data.name + \" Bad collection\");\n              }\n\n              if (nft.metadata.data.image == null) {\n                throw new Error(nft.metadata.data.name + \" Bad image\");\n              }\n\n              if (nft.account == null) {\n                throw new Error(nft.metadata.data.name + \" Bad account\");\n              } //Fuck Collections\n\n\n              let collection = null;\n\n              if (nft.metadata.data.collection != null) {\n                if (typeof nft.metadata.data.collection === 'string') {\n                  collection = nft.metadata.data.collection;\n                } else {\n                  collection = nft.metadata.data.collection.name;\n                }\n              }\n\n              if (collection == null) collection = nft.tokenInfo.symbol;\n              if (collection == null) throw new Error(nft.metadata.data.name + \" Bad collection... Again\");\n              nftMetadata.push({\n                name: nft.metadata.data.name,\n                collection: collection,\n                url: nft.metadata.data.image,\n                address: nft.account\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }); //Sort\n\n          nftMetadata.sort((a, b) => {\n            return a.collection.localeCompare(b.collection);\n          }); //Update\n\n          setNftList(nftMetadata);\n          setIsGettingNFTs(false);\n        }).catch(error => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        });\n      }).catch(error => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      });\n    } else {\n      console.log(\"Crawling...\");\n    }\n  };\n\n  const getCreditsLeft = async () => {};\n\n  const downloadNewMek = async () => {\n    if (didDownload) {\n      alert('You just downloaded!');\n    } else if (mekAddress == null || pfpAddress == null) {\n      alert('Need to pick both a Mekamount and PFP');\n    } else if (!isBuilding) {\n      setIsBuilding(true);\n\n      try {\n        const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress.address}/pfp/${pfpAddress.address}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if (blob.size < 500) {\n          const data = await response.json();\n\n          if (data.error != null) {\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        } else {\n          download(blob);\n          setDidDownload(true);\n        }\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth' // for smoothly scrolling\n\n    });\n  };\n\n  const selectNFT = nft => {\n    console.log(mekAddress + \" \" + pfpAddress);\n\n    if (nft.name.includes(\"Mekamounts\")) {\n      setMekAddress(nft);\n    } else {\n      setPfpAddress(nft);\n    }\n\n    scrollToTop();\n  };\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: mekAddress == null ? mekaHolder : mekAddress.url,\n          alt: mekaHolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: mekAddress == null ? \"\" : \"Mekamount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, \"meka\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: pfpAddress == null ? pfpHolder : pfpAddress.url,\n          alt: pfpHolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: pfpAddress == null ? \"\" : \"PFP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, \"pfp\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mini-spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"cta-button submit-gif-button\",\n      onClick: downloadNewMek,\n      disabled: isBuilding,\n      children: didDownload ? \"Complete!\" : isBuilding ? \"Building...\" : \"Build\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: \"Choose your Mekamount...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: nftList.filter(nft => {\n        return nft.name.includes(\"Mekamounts\");\n      }).map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        onClick: () => {\n          selectNFT(nft);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: nft.url,\n          alt: nft.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-spacing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: \"Choose your PFP...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: nftList.filter(nft => {\n        return !nft.name.includes(\"Mekamounts\");\n      }).map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        onClick: () => {\n          selectNFT(nft);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: nft.url,\n          alt: nft.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-spacing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this); // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }; // const onInputChange = (event) => {\n  //   const { value } = event.target;\n  //   setInputValue(value);\n  // };\n\n\n  const sendGif = async () => {// if (inputValue.length > 0) {\n    //   console.log('Gif link:', inputValue);\n    //   setGifList([...gifList, inputValue]);\n    //   setInputValue('');\n    // } else {\n    //   console.log('Empty input. Try again.');\n    // }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this); // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...'); // Call Solana program here.\n\n      grabAllNFTs(); // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: [\"\\uD83E\\uDDBE Mekamount PFP Portal [CR Left: \", credisLeft, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"N F T \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spacing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `Crafted By @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"PXXf4NgctbYI5OQ3qlmtvfM5TPo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/src/App.js"],"names":["React","useEffect","useState","querystring","twitterLogo","mekaHolder","pfpHolder","download","TWITTER_HANDLE","TWITTER_LINK","App","credisLeft","setCreditsLeft","walletAddress","setWalletAddress","mekAddress","setMekAddress","pfpAddress","setPfpAddress","pfpScale","setPfpScale","isBuilding","setIsBuilding","didDownload","setDidDownload","isGettingNFTS","setIsGettingNFTs","nftList","setNftList","getURLData","baseURL","path","params","requestedURL","length","stringify","Promise","resolve","reject","fetch","method","cache","headers","redirect","referrerPolicy","then","response","json","data","catch","error","grabAllNFTs","account","promises","forEach","token","tokenAmount","amount","decimals","push","tokenAddress","all","nfts","nftMetadata","nft","metadata","Error","name","collection","tokenInfo","symbol","image","url","address","console","log","sort","a","b","localeCompare","alert","getCreditsLeft","downloadNewMek","blob","size","scrollToTop","window","scrollTo","top","behavior","selectNFT","includes","renderConnectedContainer","filter","map","checkIfWalletIsConnected","solana","isPhantom","connect","onlyIfTrusted","publicKey","toString","connectWallet","sendGif","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import Mekamount, { runScript } from './createMekamount.js';\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport mekaHolder from './assets/meka.png';\nimport pfpHolder from './assets/pfp.png';\nimport download from 'downloadjs';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [credisLeft, setCreditsLeft] = useState(0);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [didDownload, setDidDownload] = useState(false);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [nftList, setNftList] = useState([]);\n\n  const getURLData = (baseURL = '', path = '', params = {}) => {\n    let requestedURL = baseURL + path + ((params.length == 0) ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {'accept': 'application/json'},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      }).then((response) => {\n        response.json().then((data)=>{\n          resolve(data);\n        })\n        .catch((error) => {reject(`Could not get JSON (${requestedURL})`);});\n      })\n      .catch((error) => {reject(`Could not get URL (${requestedURL})`);});\n    });\n  }\n\n  const grabAllNFTs = () => {\n    if(!isGettingNFTS){\n      setIsGettingNFTs(true);\n      getURLData(\n        \"https://public-api.solscan.io\",\n        \"/account/tokens\",\n        { account: `${walletAddress}`,},\n      ).then((data) => {\n\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if(token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0){\n            promises.push(\n              getURLData(\n                \"https://public-api.solscan.io\",\n                `/account/${token.tokenAddress}`,\n              )\n            );\n          }\n        });\n\n        // Get Metadata on all\n        Promise.all(promises)\n        .then((nfts)=>{\n          \n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft=> {\n            try{\n              if(nft.metadata == null){throw new Error('No metadata');}\n              if(nft.metadata.data.name == null){throw new Error('No name!');}\n              if(nft.metadata.data.collection == null && nft.tokenInfo.symbol == null){throw new Error(nft.metadata.data.name + \" Bad collection\");}\n              if(nft.metadata.data.image == null){throw new Error(nft.metadata.data.name + \" Bad image\");}\n              if(nft.account == null){throw new Error(nft.metadata.data.name + \" Bad account\");}\n\n              //Fuck Collections\n              let collection = null;\n              if(nft.metadata.data.collection != null){\n                if(typeof nft.metadata.data.collection === 'string'){\n                  collection = nft.metadata.data.collection;\n                } else {\n                  collection = nft.metadata.data.collection.name;\n                }\n              }\n              if(collection == null) collection = nft.tokenInfo.symbol;\n              if(collection == null) throw new Error(nft.metadata.data.name + \" Bad collection... Again\");\n\n              nftMetadata.push(\n                {\n                  name : nft.metadata.data.name, \n                  collection : collection,\n                  url : nft.metadata.data.image,\n                  address : nft.account,\n                }\n              );\n            } catch (error){\n              console.log(error);\n            }\n          });\n\n          //Sort\n          nftMetadata.sort((a, b)=>{\n            return a.collection.localeCompare(b.collection);\n          });\n\n          //Update\n          setNftList(nftMetadata);\n          setIsGettingNFTs(false);\n        })\n        .catch((error) => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        })\n\n      })\n      .catch((error) => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      })\n    } else {\n      console.log(\"Crawling...\")\n    }\n  }\n\n  const getCreditsLeft = async () => {\n\n  }\n\n  const downloadNewMek = async () => {\n    if(didDownload){\n      alert('You just downloaded!');\n    } else if(mekAddress == null || pfpAddress == null){\n      alert('Need to pick both a Mekamount and PFP');\n    } else if(!isBuilding){\n      setIsBuilding(true);\n      try {\n        const response = await fetch(`/sol/${walletAddress}/meka/${mekAddress.address}/pfp/${pfpAddress.address}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if(blob.size < 500){\n          const data = await response.json();\n          if(data.error != null){\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        } else {\n          download(blob);\n          setDidDownload(true);\n        }\n\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth' // for smoothly scrolling\n    });\n  };\n\n  const selectNFT = (nft) => {\n\n    console.log(mekAddress + \" \" + pfpAddress);\n    if(nft.name.includes(\"Mekamounts\")){\n      setMekAddress(nft);\n    } else {\n      setPfpAddress(nft);\n    }\n    \n    scrollToTop();\n  }\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n        <div className=\"selected-grid\">\n        {<div className=\"selected-item\" key={\"meka\"}>\n          <img src={mekAddress == null ? mekaHolder : mekAddress.url} alt={mekaHolder} />\n          <p className=\"sub-text\">{mekAddress == null ? \"\" : \"Mekamount\"}</p>\n        </div>}\n        {<div className=\"selected-item\" key={\"pfp\"}>\n          <img src={pfpAddress == null ? pfpHolder : pfpAddress.url} alt={pfpHolder} />\n          <p className=\"sub-text\">{pfpAddress == null ? \"\" : \"PFP\"}</p>\n        </div>}\n      </div>\n      <div className='mini-spacing'></div>\n      <button type=\"submit\" className=\"cta-button submit-gif-button\" onClick={downloadNewMek} disabled={isBuilding}>\n        {didDownload ? \"Complete!\" : (isBuilding ? \"Building...\" : \"Build\")}\n      </button>\n      <div className='spacing'></div>\n      <p className=\"sub-text\">Choose your Mekamount...</p>\n      <div className=\"gif-grid\">\n        {/* Map through gifList instead of TEST_GIFS */}\n        {nftList.filter((nft) => { return nft.name.includes(\"Mekamounts\");}).map((nft) => (\n          <div className=\"gif-item\" key={nft.url} onClick={() => {selectNFT(nft)}}>\n            <img src={nft.url} alt={nft.url} />\n            <p className=\"sub-text\">{nft.name}</p>\n            <div className='mini-spacing'></div>\n          </div>\n        ))}\n      </div>\n      <p className=\"sub-text\">Choose your PFP...</p>\n      <div className=\"gif-grid\">\n        {/* Map through gifList instead of TEST_GIFS */}\n        {nftList.filter((nft) => { return !nft.name.includes(\"Mekamounts\");}).map((nft) => (\n          <div className=\"gif-item\" key={nft.url} onClick={() => {selectNFT(nft)}}>\n            <img src={nft.url} alt={nft.url} />\n            <p className=\"sub-text\">{nft.name}</p>\n            <div className='mini-spacing'></div>\n          </div>\n        ))}\n      </div>\n      <div className='spacing'></div>\n    </div>\n  );\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // const onInputChange = (event) => {\n  //   const { value } = event.target;\n  //   setInputValue(value);\n  // };\n  \n  const sendGif = async () => {\n    // if (inputValue.length > 0) {\n    //   console.log('Gif link:', inputValue);\n    //   setGifList([...gifList, inputValue]);\n    //   setInputValue('');\n    // } else {\n    //   console.log('Empty input. Try again.');\n    // }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Mekamounts...');\n      \n      // Call Solana program here.\n      grabAllNFTs();\n  \n      // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🦾 Mekamount PFP Portal [CR Left: {credisLeft}]</p>\n          <p className=\"sub-text\">\n            N F T ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className='spacing'></div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Crafted By @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}