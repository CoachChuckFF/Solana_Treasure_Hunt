{"ast":null,"code":"'use strict';\n\nconst is = require('./is');\n/**\n * Blend modes.\n * @member\n * @private\n */\n\n\nconst blend = {\n  clear: 'clear',\n  source: 'source',\n  over: 'over',\n  in: 'in',\n  out: 'out',\n  atop: 'atop',\n  dest: 'dest',\n  'dest-over': 'dest-over',\n  'dest-in': 'dest-in',\n  'dest-out': 'dest-out',\n  'dest-atop': 'dest-atop',\n  xor: 'xor',\n  add: 'add',\n  saturate: 'saturate',\n  multiply: 'multiply',\n  screen: 'screen',\n  overlay: 'overlay',\n  darken: 'darken',\n  lighten: 'lighten',\n  'colour-dodge': 'colour-dodge',\n  'color-dodge': 'colour-dodge',\n  'colour-burn': 'colour-burn',\n  'color-burn': 'colour-burn',\n  'hard-light': 'hard-light',\n  'soft-light': 'soft-light',\n  difference: 'difference',\n  exclusion: 'exclusion'\n};\n/**\n * Composite image(s) over the processed (resized, extracted etc.) image.\n *\n * The images to composite must be the same size or smaller than the processed image.\n * If both `top` and `left` options are provided, they take precedence over `gravity`.\n *\n * The `blend` option can be one of `clear`, `source`, `over`, `in`, `out`, `atop`,\n * `dest`, `dest-over`, `dest-in`, `dest-out`, `dest-atop`,\n * `xor`, `add`, `saturate`, `multiply`, `screen`, `overlay`, `darken`, `lighten`,\n * `colour-dodge`, `color-dodge`, `colour-burn`,`color-burn`,\n * `hard-light`, `soft-light`, `difference`, `exclusion`.\n *\n * More information about blend modes can be found at\n * https://libvips.github.io/libvips/API/current/libvips-conversion.html#VipsBlendMode\n * and https://www.cairographics.org/operators/\n *\n * @since 0.22.0\n *\n * @example\n * sharp('input.png')\n *   .rotate(180)\n *   .resize(300)\n *   .flatten( { background: '#ff6600' } )\n *   .composite([{ input: 'overlay.png', gravity: 'southeast' }])\n *   .sharpen()\n *   .withMetadata()\n *   .webp( { quality: 90 } )\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains upside down, 300px wide, alpha channel flattened\n *     // onto orange background, composited with overlay.png with SE gravity,\n *     // sharpened, with metadata, 90% quality WebP image data. Phew!\n *   });\n *\n * @param {Object[]} images - Ordered list of images to composite\n * @param {Buffer|String} [images[].input] - Buffer containing image data, String containing the path to an image file, or Create object (see below)\n * @param {Object} [images[].input.create] - describes a blank overlay to be created.\n * @param {Number} [images[].input.create.width]\n * @param {Number} [images[].input.create.height]\n * @param {Number} [images[].input.create.channels] - 3-4\n * @param {String|Object} [images[].input.create.background] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @param {String} [images[].blend='over'] - how to blend this image with the image below.\n * @param {String} [images[].gravity='centre'] - gravity at which to place the overlay.\n * @param {Number} [images[].top] - the pixel offset from the top edge.\n * @param {Number} [images[].left] - the pixel offset from the left edge.\n * @param {Boolean} [images[].tile=false] - set to true to repeat the overlay image across the entire image with the given `gravity`.\n * @param {Boolean} [images[].premultiplied=false] - set to true to avoid premultipling the image below. Equivalent to the `--premultiplied` vips option.\n * @param {Number} [images[].density=72] - number representing the DPI for vector overlay image.\n * @param {Object} [images[].raw] - describes overlay when using raw pixel data.\n * @param {Number} [images[].raw.width]\n * @param {Number} [images[].raw.height]\n * @param {Number} [images[].raw.channels]\n * @param {boolean} [images[].failOnError=true] - @see {@link /api-constructor#parameters|constructor parameters}\n * @param {number|boolean} [images[].limitInputPixels=268402689] - @see {@link /api-constructor#parameters|constructor parameters}\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\nfunction composite(images) {\n  if (!Array.isArray(images)) {\n    throw is.invalidParameterError('images to composite', 'array', images);\n  }\n\n  this.options.composite = images.map(image => {\n    if (!is.object(image)) {\n      throw is.invalidParameterError('image to composite', 'object', image);\n    }\n\n    const inputOptions = this._inputOptionsFromObject(image);\n\n    const composite = {\n      input: this._createInputDescriptor(image.input, inputOptions, {\n        allowStream: false\n      }),\n      blend: 'over',\n      tile: false,\n      left: 0,\n      top: 0,\n      hasOffset: false,\n      gravity: 0,\n      premultiplied: false\n    };\n\n    if (is.defined(image.blend)) {\n      if (is.string(blend[image.blend])) {\n        composite.blend = blend[image.blend];\n      } else {\n        throw is.invalidParameterError('blend', 'valid blend name', image.blend);\n      }\n    }\n\n    if (is.defined(image.tile)) {\n      if (is.bool(image.tile)) {\n        composite.tile = image.tile;\n      } else {\n        throw is.invalidParameterError('tile', 'boolean', image.tile);\n      }\n    }\n\n    if (is.defined(image.left)) {\n      if (is.integer(image.left)) {\n        composite.left = image.left;\n      } else {\n        throw is.invalidParameterError('left', 'integer', image.left);\n      }\n    }\n\n    if (is.defined(image.top)) {\n      if (is.integer(image.top)) {\n        composite.top = image.top;\n      } else {\n        throw is.invalidParameterError('top', 'integer', image.top);\n      }\n    }\n\n    if (is.defined(image.top) !== is.defined(image.left)) {\n      throw new Error('Expected both left and top to be set');\n    } else {\n      composite.hasOffset = is.integer(image.top) && is.integer(image.left);\n    }\n\n    if (is.defined(image.gravity)) {\n      if (is.integer(image.gravity) && is.inRange(image.gravity, 0, 8)) {\n        composite.gravity = image.gravity;\n      } else if (is.string(image.gravity) && is.integer(this.constructor.gravity[image.gravity])) {\n        composite.gravity = this.constructor.gravity[image.gravity];\n      } else {\n        throw is.invalidParameterError('gravity', 'valid gravity', image.gravity);\n      }\n    }\n\n    if (is.defined(image.premultiplied)) {\n      if (is.bool(image.premultiplied)) {\n        composite.premultiplied = image.premultiplied;\n      } else {\n        throw is.invalidParameterError('premultiplied', 'boolean', image.premultiplied);\n      }\n    }\n\n    return composite;\n  });\n  return this;\n}\n/**\n * Decorate the Sharp prototype with composite-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Sharp.prototype.composite = composite;\n  Sharp.blend = blend;\n};","map":{"version":3,"sources":["/Users/drkrueger/Work/foodfrenzy/solana/mekamounts/mekamountpfp/node_modules/sharp/lib/composite.js"],"names":["is","require","blend","clear","source","over","in","out","atop","dest","xor","add","saturate","multiply","screen","overlay","darken","lighten","difference","exclusion","composite","images","Array","isArray","invalidParameterError","options","map","image","object","inputOptions","_inputOptionsFromObject","input","_createInputDescriptor","allowStream","tile","left","top","hasOffset","gravity","premultiplied","defined","string","bool","integer","Error","inRange","constructor","module","exports","Sharp","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst is = require('./is');\n\n/**\n * Blend modes.\n * @member\n * @private\n */\nconst blend = {\n  clear: 'clear',\n  source: 'source',\n  over: 'over',\n  in: 'in',\n  out: 'out',\n  atop: 'atop',\n  dest: 'dest',\n  'dest-over': 'dest-over',\n  'dest-in': 'dest-in',\n  'dest-out': 'dest-out',\n  'dest-atop': 'dest-atop',\n  xor: 'xor',\n  add: 'add',\n  saturate: 'saturate',\n  multiply: 'multiply',\n  screen: 'screen',\n  overlay: 'overlay',\n  darken: 'darken',\n  lighten: 'lighten',\n  'colour-dodge': 'colour-dodge',\n  'color-dodge': 'colour-dodge',\n  'colour-burn': 'colour-burn',\n  'color-burn': 'colour-burn',\n  'hard-light': 'hard-light',\n  'soft-light': 'soft-light',\n  difference: 'difference',\n  exclusion: 'exclusion'\n};\n\n/**\n * Composite image(s) over the processed (resized, extracted etc.) image.\n *\n * The images to composite must be the same size or smaller than the processed image.\n * If both `top` and `left` options are provided, they take precedence over `gravity`.\n *\n * The `blend` option can be one of `clear`, `source`, `over`, `in`, `out`, `atop`,\n * `dest`, `dest-over`, `dest-in`, `dest-out`, `dest-atop`,\n * `xor`, `add`, `saturate`, `multiply`, `screen`, `overlay`, `darken`, `lighten`,\n * `colour-dodge`, `color-dodge`, `colour-burn`,`color-burn`,\n * `hard-light`, `soft-light`, `difference`, `exclusion`.\n *\n * More information about blend modes can be found at\n * https://libvips.github.io/libvips/API/current/libvips-conversion.html#VipsBlendMode\n * and https://www.cairographics.org/operators/\n *\n * @since 0.22.0\n *\n * @example\n * sharp('input.png')\n *   .rotate(180)\n *   .resize(300)\n *   .flatten( { background: '#ff6600' } )\n *   .composite([{ input: 'overlay.png', gravity: 'southeast' }])\n *   .sharpen()\n *   .withMetadata()\n *   .webp( { quality: 90 } )\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains upside down, 300px wide, alpha channel flattened\n *     // onto orange background, composited with overlay.png with SE gravity,\n *     // sharpened, with metadata, 90% quality WebP image data. Phew!\n *   });\n *\n * @param {Object[]} images - Ordered list of images to composite\n * @param {Buffer|String} [images[].input] - Buffer containing image data, String containing the path to an image file, or Create object (see below)\n * @param {Object} [images[].input.create] - describes a blank overlay to be created.\n * @param {Number} [images[].input.create.width]\n * @param {Number} [images[].input.create.height]\n * @param {Number} [images[].input.create.channels] - 3-4\n * @param {String|Object} [images[].input.create.background] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @param {String} [images[].blend='over'] - how to blend this image with the image below.\n * @param {String} [images[].gravity='centre'] - gravity at which to place the overlay.\n * @param {Number} [images[].top] - the pixel offset from the top edge.\n * @param {Number} [images[].left] - the pixel offset from the left edge.\n * @param {Boolean} [images[].tile=false] - set to true to repeat the overlay image across the entire image with the given `gravity`.\n * @param {Boolean} [images[].premultiplied=false] - set to true to avoid premultipling the image below. Equivalent to the `--premultiplied` vips option.\n * @param {Number} [images[].density=72] - number representing the DPI for vector overlay image.\n * @param {Object} [images[].raw] - describes overlay when using raw pixel data.\n * @param {Number} [images[].raw.width]\n * @param {Number} [images[].raw.height]\n * @param {Number} [images[].raw.channels]\n * @param {boolean} [images[].failOnError=true] - @see {@link /api-constructor#parameters|constructor parameters}\n * @param {number|boolean} [images[].limitInputPixels=268402689] - @see {@link /api-constructor#parameters|constructor parameters}\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction composite (images) {\n  if (!Array.isArray(images)) {\n    throw is.invalidParameterError('images to composite', 'array', images);\n  }\n  this.options.composite = images.map(image => {\n    if (!is.object(image)) {\n      throw is.invalidParameterError('image to composite', 'object', image);\n    }\n    const inputOptions = this._inputOptionsFromObject(image);\n    const composite = {\n      input: this._createInputDescriptor(image.input, inputOptions, { allowStream: false }),\n      blend: 'over',\n      tile: false,\n      left: 0,\n      top: 0,\n      hasOffset: false,\n      gravity: 0,\n      premultiplied: false\n    };\n    if (is.defined(image.blend)) {\n      if (is.string(blend[image.blend])) {\n        composite.blend = blend[image.blend];\n      } else {\n        throw is.invalidParameterError('blend', 'valid blend name', image.blend);\n      }\n    }\n    if (is.defined(image.tile)) {\n      if (is.bool(image.tile)) {\n        composite.tile = image.tile;\n      } else {\n        throw is.invalidParameterError('tile', 'boolean', image.tile);\n      }\n    }\n    if (is.defined(image.left)) {\n      if (is.integer(image.left)) {\n        composite.left = image.left;\n      } else {\n        throw is.invalidParameterError('left', 'integer', image.left);\n      }\n    }\n    if (is.defined(image.top)) {\n      if (is.integer(image.top)) {\n        composite.top = image.top;\n      } else {\n        throw is.invalidParameterError('top', 'integer', image.top);\n      }\n    }\n    if (is.defined(image.top) !== is.defined(image.left)) {\n      throw new Error('Expected both left and top to be set');\n    } else {\n      composite.hasOffset = is.integer(image.top) && is.integer(image.left);\n    }\n    if (is.defined(image.gravity)) {\n      if (is.integer(image.gravity) && is.inRange(image.gravity, 0, 8)) {\n        composite.gravity = image.gravity;\n      } else if (is.string(image.gravity) && is.integer(this.constructor.gravity[image.gravity])) {\n        composite.gravity = this.constructor.gravity[image.gravity];\n      } else {\n        throw is.invalidParameterError('gravity', 'valid gravity', image.gravity);\n      }\n    }\n    if (is.defined(image.premultiplied)) {\n      if (is.bool(image.premultiplied)) {\n        composite.premultiplied = image.premultiplied;\n      } else {\n        throw is.invalidParameterError('premultiplied', 'boolean', image.premultiplied);\n      }\n    }\n\n    return composite;\n  });\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with composite-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Sharp.prototype.composite = composite;\n  Sharp.blend = blend;\n};\n"]},"metadata":{},"sourceType":"script"}